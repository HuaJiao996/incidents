/* tslint:disable */
/* eslint-disable */
/**
 *  - version 1.0.0
 *
 *
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type AlertDto = {
  /**
   * [required]
   */
  title: string;
  /**
   * [required]
   */
  content: string;
  /**
   * [required]
   */
  type: 'trigger' | 'resolve';
  customFields?: Record<string, unknown>;
};
export type AlertResponseDto = {
  /**
   * [required]
   */
  id: number;
  /**
   * [required]
   */
  title: string;
  /**
   * [required]
   */
  content: string;
  /**
   * [required]
   */
  incidentId: number;
  /**
   * [required]
   */
  createdAt: string;
  /**
   * [required]
   */
  updatedAt: string;
  /**
   * [required]
   */
  service: object;
};
export type CreateServiceDto = {
  /**
   * [required]
   */
  name: string;
  description?: string;
};
export type CreateIncidentDto = object;
export type UpdateIncidentDto = object;
export type CreateIncidentTypeDto = object;
export type UpdateIncidentTypeDto = object;
export type CreateServiceRouteDto = object;
export type UpdateServiceRouteDto = object;
export type CreateGlobalCustomFieldDto = object;
export type UpdateGlobalCustomFieldDto = object;
declare global {
  interface Apis {
    alert: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /alert
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   title: string
       *   // [required]
       *   content: string
       *   // [required]
       *   type: 'trigger' | 'resolve'
       *   customFields?: Record<string, unknown>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      receive<
        Config extends Alova2MethodConfig<unknown> & {
          data: AlertDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'alert.receive', Config>;
      /**
       * ---
       *
       * [GET] 获取所有告警
       *
       * **path:** /alert
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   // [required]
       *   id: number
       *   // [required]
       *   title: string
       *   // [required]
       *   content: string
       *   // [required]
       *   incidentId: number
       *   // [required]
       *   createdAt: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   service: object
       * }>
       * ```
       */
      findAll<Config extends Alova2MethodConfig<AlertResponseDto[]>>(
        config?: Config
      ): Alova2Method<AlertResponseDto[], 'alert.findAll', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /alert/{serviceId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   serviceId: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   title: string
       *   // [required]
       *   content: string
       *   // [required]
       *   type: 'trigger' | 'resolve'
       *   customFields?: Record<string, unknown>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      receiveWithServiceId<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            serviceId: string;
          };
          data: AlertDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'alert.receiveWithServiceId', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /alert/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: number
       *   // [required]
       *   title: string
       *   // [required]
       *   content: string
       *   // [required]
       *   incidentId: number
       *   // [required]
       *   createdAt: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   service: object
       * }
       * ```
       */
      findOne<
        Config extends Alova2MethodConfig<AlertResponseDto> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<AlertResponseDto, 'alert.findOne', Config>;
    };
    service: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/service
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   name: string
       *   description?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      create<
        Config extends Alova2MethodConfig<unknown> & {
          data: CreateServiceDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'service.create', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/service
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      findAll<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'service.findAll', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/service/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      findOne<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'service.findOne', Config>;
      /**
       * ---
       *
       * [PATCH]
       *
       * **path:** /api/service/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   name: string
       *   description?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      update<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: CreateServiceDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'service.update', Config>;
    };
    incident: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /incident
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      create<
        Config extends Alova2MethodConfig<unknown> & {
          data: CreateIncidentDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'incident.create', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /incident
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      findAll<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'incident.findAll', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /incident/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      findOne<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'incident.findOne', Config>;
      /**
       * ---
       *
       * [PATCH]
       *
       * **path:** /incident/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      update<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: UpdateIncidentDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'incident.update', Config>;
    };
    incidenttype: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /incident-type/{serviceId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   serviceId: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      create<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            serviceId: string;
          };
          data: CreateIncidentTypeDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'incidenttype.create', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /incident-type/{serviceId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   serviceId: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      findAll<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            serviceId: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'incidenttype.findAll', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /incident-type/{serviceId}/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   serviceId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      findOne<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            serviceId: string;
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'incidenttype.findOne', Config>;
      /**
       * ---
       *
       * [PATCH]
       *
       * **path:** /incident-type/{serviceId}/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   serviceId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      update<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            serviceId: string;
            /**
             * [required]
             */
            id: string;
          };
          data: UpdateIncidentTypeDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'incidenttype.update', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /incident-type/{serviceId}/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   serviceId: string
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      remove<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            serviceId: string;
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'incidenttype.remove', Config>;
    };
    serviceroute: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /service-route
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      create<
        Config extends Alova2MethodConfig<unknown> & {
          data: CreateServiceRouteDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'serviceroute.create', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /service-route
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      findAll<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'serviceroute.findAll', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /service-route/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      findOne<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'serviceroute.findOne', Config>;
      /**
       * ---
       *
       * [PATCH]
       *
       * **path:** /service-route/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      update<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: UpdateServiceRouteDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'serviceroute.update', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /service-route/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      remove<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'serviceroute.remove', Config>;
    };
    globalcustomfield: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /global-custom-field
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      create<
        Config extends Alova2MethodConfig<unknown> & {
          data: CreateGlobalCustomFieldDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'globalcustomfield.create', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /global-custom-field
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      findAll<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'globalcustomfield.findAll', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /global-custom-field/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      findOne<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'globalcustomfield.findOne', Config>;
      /**
       * ---
       *
       * [PATCH]
       *
       * **path:** /global-custom-field/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      update<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: UpdateGlobalCustomFieldDto;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'globalcustomfield.update', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /global-custom-field/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      remove<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'globalcustomfield.remove', Config>;
    };
  }

  var Apis: Apis;
}
