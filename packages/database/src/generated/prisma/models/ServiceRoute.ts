
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ServiceRoute` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ServiceRoute
 * 
 */
export type ServiceRouteModel = runtime.Types.Result.DefaultSelection<Prisma.$ServiceRoutePayload>

export type AggregateServiceRoute = {
  _count: ServiceRouteCountAggregateOutputType | null
  _avg: ServiceRouteAvgAggregateOutputType | null
  _sum: ServiceRouteSumAggregateOutputType | null
  _min: ServiceRouteMinAggregateOutputType | null
  _max: ServiceRouteMaxAggregateOutputType | null
}

export type ServiceRouteAvgAggregateOutputType = {
  id: number | null
  order: number | null
}

export type ServiceRouteSumAggregateOutputType = {
  id: number | null
  order: number | null
}

export type ServiceRouteMinAggregateOutputType = {
  id: number | null
  serviceId: string | null
  order: number | null
  condition: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  createdById: string | null
  updatedById: string | null
}

export type ServiceRouteMaxAggregateOutputType = {
  id: number | null
  serviceId: string | null
  order: number | null
  condition: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  createdById: string | null
  updatedById: string | null
}

export type ServiceRouteCountAggregateOutputType = {
  id: number
  serviceId: number
  order: number
  condition: number
  description: number
  createdAt: number
  updatedAt: number
  createdById: number
  updatedById: number
  _all: number
}


export type ServiceRouteAvgAggregateInputType = {
  id?: true
  order?: true
}

export type ServiceRouteSumAggregateInputType = {
  id?: true
  order?: true
}

export type ServiceRouteMinAggregateInputType = {
  id?: true
  serviceId?: true
  order?: true
  condition?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  createdById?: true
  updatedById?: true
}

export type ServiceRouteMaxAggregateInputType = {
  id?: true
  serviceId?: true
  order?: true
  condition?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  createdById?: true
  updatedById?: true
}

export type ServiceRouteCountAggregateInputType = {
  id?: true
  serviceId?: true
  order?: true
  condition?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  createdById?: true
  updatedById?: true
  _all?: true
}

export type ServiceRouteAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ServiceRoute to aggregate.
   */
  where?: Prisma.ServiceRouteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServiceRoutes to fetch.
   */
  orderBy?: Prisma.ServiceRouteOrderByWithRelationInput | Prisma.ServiceRouteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ServiceRouteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServiceRoutes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServiceRoutes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ServiceRoutes
  **/
  _count?: true | ServiceRouteCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ServiceRouteAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ServiceRouteSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ServiceRouteMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ServiceRouteMaxAggregateInputType
}

export type GetServiceRouteAggregateType<T extends ServiceRouteAggregateArgs> = {
      [P in keyof T & keyof AggregateServiceRoute]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateServiceRoute[P]>
    : Prisma.GetScalarType<T[P], AggregateServiceRoute[P]>
}




export type ServiceRouteGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServiceRouteWhereInput
  orderBy?: Prisma.ServiceRouteOrderByWithAggregationInput | Prisma.ServiceRouteOrderByWithAggregationInput[]
  by: Prisma.ServiceRouteScalarFieldEnum[] | Prisma.ServiceRouteScalarFieldEnum
  having?: Prisma.ServiceRouteScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ServiceRouteCountAggregateInputType | true
  _avg?: ServiceRouteAvgAggregateInputType
  _sum?: ServiceRouteSumAggregateInputType
  _min?: ServiceRouteMinAggregateInputType
  _max?: ServiceRouteMaxAggregateInputType
}

export type ServiceRouteGroupByOutputType = {
  id: number
  serviceId: string
  order: number
  condition: string
  description: string
  createdAt: Date
  updatedAt: Date
  createdById: string
  updatedById: string
  _count: ServiceRouteCountAggregateOutputType | null
  _avg: ServiceRouteAvgAggregateOutputType | null
  _sum: ServiceRouteSumAggregateOutputType | null
  _min: ServiceRouteMinAggregateOutputType | null
  _max: ServiceRouteMaxAggregateOutputType | null
}

type GetServiceRouteGroupByPayload<T extends ServiceRouteGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ServiceRouteGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ServiceRouteGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ServiceRouteGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ServiceRouteGroupByOutputType[P]>
      }
    >
  >



export type ServiceRouteWhereInput = {
  AND?: Prisma.ServiceRouteWhereInput | Prisma.ServiceRouteWhereInput[]
  OR?: Prisma.ServiceRouteWhereInput[]
  NOT?: Prisma.ServiceRouteWhereInput | Prisma.ServiceRouteWhereInput[]
  id?: Prisma.IntFilter<"ServiceRoute"> | number
  serviceId?: Prisma.StringFilter<"ServiceRoute"> | string
  order?: Prisma.IntFilter<"ServiceRoute"> | number
  condition?: Prisma.StringFilter<"ServiceRoute"> | string
  description?: Prisma.StringFilter<"ServiceRoute"> | string
  createdAt?: Prisma.DateTimeFilter<"ServiceRoute"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ServiceRoute"> | Date | string
  createdById?: Prisma.StringFilter<"ServiceRoute"> | string
  updatedById?: Prisma.StringFilter<"ServiceRoute"> | string
  service?: Prisma.XOR<Prisma.ServiceScalarRelationFilter, Prisma.ServiceWhereInput>
  createdBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  updatedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ServiceRouteOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
  service?: Prisma.ServiceOrderByWithRelationInput
  createdBy?: Prisma.UserOrderByWithRelationInput
  updatedBy?: Prisma.UserOrderByWithRelationInput
}

export type ServiceRouteWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ServiceRouteWhereInput | Prisma.ServiceRouteWhereInput[]
  OR?: Prisma.ServiceRouteWhereInput[]
  NOT?: Prisma.ServiceRouteWhereInput | Prisma.ServiceRouteWhereInput[]
  serviceId?: Prisma.StringFilter<"ServiceRoute"> | string
  order?: Prisma.IntFilter<"ServiceRoute"> | number
  condition?: Prisma.StringFilter<"ServiceRoute"> | string
  description?: Prisma.StringFilter<"ServiceRoute"> | string
  createdAt?: Prisma.DateTimeFilter<"ServiceRoute"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ServiceRoute"> | Date | string
  createdById?: Prisma.StringFilter<"ServiceRoute"> | string
  updatedById?: Prisma.StringFilter<"ServiceRoute"> | string
  service?: Prisma.XOR<Prisma.ServiceScalarRelationFilter, Prisma.ServiceWhereInput>
  createdBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  updatedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type ServiceRouteOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
  _count?: Prisma.ServiceRouteCountOrderByAggregateInput
  _avg?: Prisma.ServiceRouteAvgOrderByAggregateInput
  _max?: Prisma.ServiceRouteMaxOrderByAggregateInput
  _min?: Prisma.ServiceRouteMinOrderByAggregateInput
  _sum?: Prisma.ServiceRouteSumOrderByAggregateInput
}

export type ServiceRouteScalarWhereWithAggregatesInput = {
  AND?: Prisma.ServiceRouteScalarWhereWithAggregatesInput | Prisma.ServiceRouteScalarWhereWithAggregatesInput[]
  OR?: Prisma.ServiceRouteScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ServiceRouteScalarWhereWithAggregatesInput | Prisma.ServiceRouteScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ServiceRoute"> | number
  serviceId?: Prisma.StringWithAggregatesFilter<"ServiceRoute"> | string
  order?: Prisma.IntWithAggregatesFilter<"ServiceRoute"> | number
  condition?: Prisma.StringWithAggregatesFilter<"ServiceRoute"> | string
  description?: Prisma.StringWithAggregatesFilter<"ServiceRoute"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ServiceRoute"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ServiceRoute"> | Date | string
  createdById?: Prisma.StringWithAggregatesFilter<"ServiceRoute"> | string
  updatedById?: Prisma.StringWithAggregatesFilter<"ServiceRoute"> | string
}

export type ServiceRouteCreateInput = {
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutRoutesInput
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedServiceRoutesInput
  updatedBy: Prisma.UserCreateNestedOneWithoutUpdatedServiceRoutesInput
}

export type ServiceRouteUncheckedCreateInput = {
  id?: number
  serviceId: string
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
}

export type ServiceRouteUpdateInput = {
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutRoutesNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedServiceRoutesNestedInput
  updatedBy?: Prisma.UserUpdateOneRequiredWithoutUpdatedServiceRoutesNestedInput
}

export type ServiceRouteUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ServiceRouteCreateManyInput = {
  id?: number
  serviceId: string
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
}

export type ServiceRouteUpdateManyMutationInput = {
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServiceRouteUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ServiceRouteListRelationFilter = {
  every?: Prisma.ServiceRouteWhereInput
  some?: Prisma.ServiceRouteWhereInput
  none?: Prisma.ServiceRouteWhereInput
}

export type ServiceRouteOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ServiceRouteCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
}

export type ServiceRouteAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type ServiceRouteMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
}

export type ServiceRouteMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
}

export type ServiceRouteSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type ServiceRouteCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutServiceInput, Prisma.ServiceRouteUncheckedCreateWithoutServiceInput> | Prisma.ServiceRouteCreateWithoutServiceInput[] | Prisma.ServiceRouteUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutServiceInput | Prisma.ServiceRouteCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.ServiceRouteCreateManyServiceInputEnvelope
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
}

export type ServiceRouteUncheckedCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutServiceInput, Prisma.ServiceRouteUncheckedCreateWithoutServiceInput> | Prisma.ServiceRouteCreateWithoutServiceInput[] | Prisma.ServiceRouteUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutServiceInput | Prisma.ServiceRouteCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.ServiceRouteCreateManyServiceInputEnvelope
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
}

export type ServiceRouteUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutServiceInput, Prisma.ServiceRouteUncheckedCreateWithoutServiceInput> | Prisma.ServiceRouteCreateWithoutServiceInput[] | Prisma.ServiceRouteUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutServiceInput | Prisma.ServiceRouteCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.ServiceRouteUpsertWithWhereUniqueWithoutServiceInput | Prisma.ServiceRouteUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.ServiceRouteCreateManyServiceInputEnvelope
  set?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  disconnect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  delete?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  update?: Prisma.ServiceRouteUpdateWithWhereUniqueWithoutServiceInput | Prisma.ServiceRouteUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.ServiceRouteUpdateManyWithWhereWithoutServiceInput | Prisma.ServiceRouteUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.ServiceRouteScalarWhereInput | Prisma.ServiceRouteScalarWhereInput[]
}

export type ServiceRouteUncheckedUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutServiceInput, Prisma.ServiceRouteUncheckedCreateWithoutServiceInput> | Prisma.ServiceRouteCreateWithoutServiceInput[] | Prisma.ServiceRouteUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutServiceInput | Prisma.ServiceRouteCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.ServiceRouteUpsertWithWhereUniqueWithoutServiceInput | Prisma.ServiceRouteUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.ServiceRouteCreateManyServiceInputEnvelope
  set?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  disconnect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  delete?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  update?: Prisma.ServiceRouteUpdateWithWhereUniqueWithoutServiceInput | Prisma.ServiceRouteUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.ServiceRouteUpdateManyWithWhereWithoutServiceInput | Prisma.ServiceRouteUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.ServiceRouteScalarWhereInput | Prisma.ServiceRouteScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ServiceRouteCreateNestedManyWithoutCreatedByInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutCreatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutCreatedByInput> | Prisma.ServiceRouteCreateWithoutCreatedByInput[] | Prisma.ServiceRouteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutCreatedByInput | Prisma.ServiceRouteCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.ServiceRouteCreateManyCreatedByInputEnvelope
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
}

export type ServiceRouteCreateNestedManyWithoutUpdatedByInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutUpdatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutUpdatedByInput> | Prisma.ServiceRouteCreateWithoutUpdatedByInput[] | Prisma.ServiceRouteUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutUpdatedByInput | Prisma.ServiceRouteCreateOrConnectWithoutUpdatedByInput[]
  createMany?: Prisma.ServiceRouteCreateManyUpdatedByInputEnvelope
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
}

export type ServiceRouteUncheckedCreateNestedManyWithoutCreatedByInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutCreatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutCreatedByInput> | Prisma.ServiceRouteCreateWithoutCreatedByInput[] | Prisma.ServiceRouteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutCreatedByInput | Prisma.ServiceRouteCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.ServiceRouteCreateManyCreatedByInputEnvelope
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
}

export type ServiceRouteUncheckedCreateNestedManyWithoutUpdatedByInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutUpdatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutUpdatedByInput> | Prisma.ServiceRouteCreateWithoutUpdatedByInput[] | Prisma.ServiceRouteUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutUpdatedByInput | Prisma.ServiceRouteCreateOrConnectWithoutUpdatedByInput[]
  createMany?: Prisma.ServiceRouteCreateManyUpdatedByInputEnvelope
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
}

export type ServiceRouteUpdateManyWithoutCreatedByNestedInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutCreatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutCreatedByInput> | Prisma.ServiceRouteCreateWithoutCreatedByInput[] | Prisma.ServiceRouteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutCreatedByInput | Prisma.ServiceRouteCreateOrConnectWithoutCreatedByInput[]
  upsert?: Prisma.ServiceRouteUpsertWithWhereUniqueWithoutCreatedByInput | Prisma.ServiceRouteUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.ServiceRouteCreateManyCreatedByInputEnvelope
  set?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  disconnect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  delete?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  update?: Prisma.ServiceRouteUpdateWithWhereUniqueWithoutCreatedByInput | Prisma.ServiceRouteUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?: Prisma.ServiceRouteUpdateManyWithWhereWithoutCreatedByInput | Prisma.ServiceRouteUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.ServiceRouteScalarWhereInput | Prisma.ServiceRouteScalarWhereInput[]
}

export type ServiceRouteUpdateManyWithoutUpdatedByNestedInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutUpdatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutUpdatedByInput> | Prisma.ServiceRouteCreateWithoutUpdatedByInput[] | Prisma.ServiceRouteUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutUpdatedByInput | Prisma.ServiceRouteCreateOrConnectWithoutUpdatedByInput[]
  upsert?: Prisma.ServiceRouteUpsertWithWhereUniqueWithoutUpdatedByInput | Prisma.ServiceRouteUpsertWithWhereUniqueWithoutUpdatedByInput[]
  createMany?: Prisma.ServiceRouteCreateManyUpdatedByInputEnvelope
  set?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  disconnect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  delete?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  update?: Prisma.ServiceRouteUpdateWithWhereUniqueWithoutUpdatedByInput | Prisma.ServiceRouteUpdateWithWhereUniqueWithoutUpdatedByInput[]
  updateMany?: Prisma.ServiceRouteUpdateManyWithWhereWithoutUpdatedByInput | Prisma.ServiceRouteUpdateManyWithWhereWithoutUpdatedByInput[]
  deleteMany?: Prisma.ServiceRouteScalarWhereInput | Prisma.ServiceRouteScalarWhereInput[]
}

export type ServiceRouteUncheckedUpdateManyWithoutCreatedByNestedInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutCreatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutCreatedByInput> | Prisma.ServiceRouteCreateWithoutCreatedByInput[] | Prisma.ServiceRouteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutCreatedByInput | Prisma.ServiceRouteCreateOrConnectWithoutCreatedByInput[]
  upsert?: Prisma.ServiceRouteUpsertWithWhereUniqueWithoutCreatedByInput | Prisma.ServiceRouteUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.ServiceRouteCreateManyCreatedByInputEnvelope
  set?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  disconnect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  delete?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  update?: Prisma.ServiceRouteUpdateWithWhereUniqueWithoutCreatedByInput | Prisma.ServiceRouteUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?: Prisma.ServiceRouteUpdateManyWithWhereWithoutCreatedByInput | Prisma.ServiceRouteUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.ServiceRouteScalarWhereInput | Prisma.ServiceRouteScalarWhereInput[]
}

export type ServiceRouteUncheckedUpdateManyWithoutUpdatedByNestedInput = {
  create?: Prisma.XOR<Prisma.ServiceRouteCreateWithoutUpdatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutUpdatedByInput> | Prisma.ServiceRouteCreateWithoutUpdatedByInput[] | Prisma.ServiceRouteUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.ServiceRouteCreateOrConnectWithoutUpdatedByInput | Prisma.ServiceRouteCreateOrConnectWithoutUpdatedByInput[]
  upsert?: Prisma.ServiceRouteUpsertWithWhereUniqueWithoutUpdatedByInput | Prisma.ServiceRouteUpsertWithWhereUniqueWithoutUpdatedByInput[]
  createMany?: Prisma.ServiceRouteCreateManyUpdatedByInputEnvelope
  set?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  disconnect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  delete?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  connect?: Prisma.ServiceRouteWhereUniqueInput | Prisma.ServiceRouteWhereUniqueInput[]
  update?: Prisma.ServiceRouteUpdateWithWhereUniqueWithoutUpdatedByInput | Prisma.ServiceRouteUpdateWithWhereUniqueWithoutUpdatedByInput[]
  updateMany?: Prisma.ServiceRouteUpdateManyWithWhereWithoutUpdatedByInput | Prisma.ServiceRouteUpdateManyWithWhereWithoutUpdatedByInput[]
  deleteMany?: Prisma.ServiceRouteScalarWhereInput | Prisma.ServiceRouteScalarWhereInput[]
}

export type ServiceRouteCreateWithoutServiceInput = {
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedServiceRoutesInput
  updatedBy: Prisma.UserCreateNestedOneWithoutUpdatedServiceRoutesInput
}

export type ServiceRouteUncheckedCreateWithoutServiceInput = {
  id?: number
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
}

export type ServiceRouteCreateOrConnectWithoutServiceInput = {
  where: Prisma.ServiceRouteWhereUniqueInput
  create: Prisma.XOR<Prisma.ServiceRouteCreateWithoutServiceInput, Prisma.ServiceRouteUncheckedCreateWithoutServiceInput>
}

export type ServiceRouteCreateManyServiceInputEnvelope = {
  data: Prisma.ServiceRouteCreateManyServiceInput | Prisma.ServiceRouteCreateManyServiceInput[]
  skipDuplicates?: boolean
}

export type ServiceRouteUpsertWithWhereUniqueWithoutServiceInput = {
  where: Prisma.ServiceRouteWhereUniqueInput
  update: Prisma.XOR<Prisma.ServiceRouteUpdateWithoutServiceInput, Prisma.ServiceRouteUncheckedUpdateWithoutServiceInput>
  create: Prisma.XOR<Prisma.ServiceRouteCreateWithoutServiceInput, Prisma.ServiceRouteUncheckedCreateWithoutServiceInput>
}

export type ServiceRouteUpdateWithWhereUniqueWithoutServiceInput = {
  where: Prisma.ServiceRouteWhereUniqueInput
  data: Prisma.XOR<Prisma.ServiceRouteUpdateWithoutServiceInput, Prisma.ServiceRouteUncheckedUpdateWithoutServiceInput>
}

export type ServiceRouteUpdateManyWithWhereWithoutServiceInput = {
  where: Prisma.ServiceRouteScalarWhereInput
  data: Prisma.XOR<Prisma.ServiceRouteUpdateManyMutationInput, Prisma.ServiceRouteUncheckedUpdateManyWithoutServiceInput>
}

export type ServiceRouteScalarWhereInput = {
  AND?: Prisma.ServiceRouteScalarWhereInput | Prisma.ServiceRouteScalarWhereInput[]
  OR?: Prisma.ServiceRouteScalarWhereInput[]
  NOT?: Prisma.ServiceRouteScalarWhereInput | Prisma.ServiceRouteScalarWhereInput[]
  id?: Prisma.IntFilter<"ServiceRoute"> | number
  serviceId?: Prisma.StringFilter<"ServiceRoute"> | string
  order?: Prisma.IntFilter<"ServiceRoute"> | number
  condition?: Prisma.StringFilter<"ServiceRoute"> | string
  description?: Prisma.StringFilter<"ServiceRoute"> | string
  createdAt?: Prisma.DateTimeFilter<"ServiceRoute"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ServiceRoute"> | Date | string
  createdById?: Prisma.StringFilter<"ServiceRoute"> | string
  updatedById?: Prisma.StringFilter<"ServiceRoute"> | string
}

export type ServiceRouteCreateWithoutCreatedByInput = {
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutRoutesInput
  updatedBy: Prisma.UserCreateNestedOneWithoutUpdatedServiceRoutesInput
}

export type ServiceRouteUncheckedCreateWithoutCreatedByInput = {
  id?: number
  serviceId: string
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  updatedById: string
}

export type ServiceRouteCreateOrConnectWithoutCreatedByInput = {
  where: Prisma.ServiceRouteWhereUniqueInput
  create: Prisma.XOR<Prisma.ServiceRouteCreateWithoutCreatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutCreatedByInput>
}

export type ServiceRouteCreateManyCreatedByInputEnvelope = {
  data: Prisma.ServiceRouteCreateManyCreatedByInput | Prisma.ServiceRouteCreateManyCreatedByInput[]
  skipDuplicates?: boolean
}

export type ServiceRouteCreateWithoutUpdatedByInput = {
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutRoutesInput
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedServiceRoutesInput
}

export type ServiceRouteUncheckedCreateWithoutUpdatedByInput = {
  id?: number
  serviceId: string
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
}

export type ServiceRouteCreateOrConnectWithoutUpdatedByInput = {
  where: Prisma.ServiceRouteWhereUniqueInput
  create: Prisma.XOR<Prisma.ServiceRouteCreateWithoutUpdatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutUpdatedByInput>
}

export type ServiceRouteCreateManyUpdatedByInputEnvelope = {
  data: Prisma.ServiceRouteCreateManyUpdatedByInput | Prisma.ServiceRouteCreateManyUpdatedByInput[]
  skipDuplicates?: boolean
}

export type ServiceRouteUpsertWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.ServiceRouteWhereUniqueInput
  update: Prisma.XOR<Prisma.ServiceRouteUpdateWithoutCreatedByInput, Prisma.ServiceRouteUncheckedUpdateWithoutCreatedByInput>
  create: Prisma.XOR<Prisma.ServiceRouteCreateWithoutCreatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutCreatedByInput>
}

export type ServiceRouteUpdateWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.ServiceRouteWhereUniqueInput
  data: Prisma.XOR<Prisma.ServiceRouteUpdateWithoutCreatedByInput, Prisma.ServiceRouteUncheckedUpdateWithoutCreatedByInput>
}

export type ServiceRouteUpdateManyWithWhereWithoutCreatedByInput = {
  where: Prisma.ServiceRouteScalarWhereInput
  data: Prisma.XOR<Prisma.ServiceRouteUpdateManyMutationInput, Prisma.ServiceRouteUncheckedUpdateManyWithoutCreatedByInput>
}

export type ServiceRouteUpsertWithWhereUniqueWithoutUpdatedByInput = {
  where: Prisma.ServiceRouteWhereUniqueInput
  update: Prisma.XOR<Prisma.ServiceRouteUpdateWithoutUpdatedByInput, Prisma.ServiceRouteUncheckedUpdateWithoutUpdatedByInput>
  create: Prisma.XOR<Prisma.ServiceRouteCreateWithoutUpdatedByInput, Prisma.ServiceRouteUncheckedCreateWithoutUpdatedByInput>
}

export type ServiceRouteUpdateWithWhereUniqueWithoutUpdatedByInput = {
  where: Prisma.ServiceRouteWhereUniqueInput
  data: Prisma.XOR<Prisma.ServiceRouteUpdateWithoutUpdatedByInput, Prisma.ServiceRouteUncheckedUpdateWithoutUpdatedByInput>
}

export type ServiceRouteUpdateManyWithWhereWithoutUpdatedByInput = {
  where: Prisma.ServiceRouteScalarWhereInput
  data: Prisma.XOR<Prisma.ServiceRouteUpdateManyMutationInput, Prisma.ServiceRouteUncheckedUpdateManyWithoutUpdatedByInput>
}

export type ServiceRouteCreateManyServiceInput = {
  id?: number
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
}

export type ServiceRouteUpdateWithoutServiceInput = {
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedServiceRoutesNestedInput
  updatedBy?: Prisma.UserUpdateOneRequiredWithoutUpdatedServiceRoutesNestedInput
}

export type ServiceRouteUncheckedUpdateWithoutServiceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ServiceRouteUncheckedUpdateManyWithoutServiceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ServiceRouteCreateManyCreatedByInput = {
  id?: number
  serviceId: string
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  updatedById: string
}

export type ServiceRouteCreateManyUpdatedByInput = {
  id?: number
  serviceId: string
  order: number
  condition?: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
}

export type ServiceRouteUpdateWithoutCreatedByInput = {
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutRoutesNestedInput
  updatedBy?: Prisma.UserUpdateOneRequiredWithoutUpdatedServiceRoutesNestedInput
}

export type ServiceRouteUncheckedUpdateWithoutCreatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ServiceRouteUncheckedUpdateManyWithoutCreatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ServiceRouteUpdateWithoutUpdatedByInput = {
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutRoutesNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedServiceRoutesNestedInput
}

export type ServiceRouteUncheckedUpdateWithoutUpdatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ServiceRouteUncheckedUpdateManyWithoutUpdatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
}



export type ServiceRouteSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  serviceId?: boolean
  order?: boolean
  condition?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["serviceRoute"]>

export type ServiceRouteSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  serviceId?: boolean
  order?: boolean
  condition?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["serviceRoute"]>

export type ServiceRouteSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  serviceId?: boolean
  order?: boolean
  condition?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["serviceRoute"]>

export type ServiceRouteSelectScalar = {
  id?: boolean
  serviceId?: boolean
  order?: boolean
  condition?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
}

export type ServiceRouteOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "serviceId" | "order" | "condition" | "description" | "createdAt" | "updatedAt" | "createdById" | "updatedById", ExtArgs["result"]["serviceRoute"]>
export type ServiceRouteInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ServiceRouteIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ServiceRouteIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ServiceRoutePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ServiceRoute"
  objects: {
    service: Prisma.$ServicePayload<ExtArgs>
    createdBy: Prisma.$UserPayload<ExtArgs>
    updatedBy: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    serviceId: string
    order: number
    condition: string
    description: string
    createdAt: Date
    updatedAt: Date
    createdById: string
    updatedById: string
  }, ExtArgs["result"]["serviceRoute"]>
  composites: {}
}

export type ServiceRouteGetPayload<S extends boolean | null | undefined | ServiceRouteDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload, S>

export type ServiceRouteCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ServiceRouteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ServiceRouteCountAggregateInputType | true
  }

export interface ServiceRouteDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceRoute'], meta: { name: 'ServiceRoute' } }
  /**
   * Find zero or one ServiceRoute that matches the filter.
   * @param {ServiceRouteFindUniqueArgs} args - Arguments to find a ServiceRoute
   * @example
   * // Get one ServiceRoute
   * const serviceRoute = await prisma.serviceRoute.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ServiceRouteFindUniqueArgs>(args: Prisma.SelectSubset<T, ServiceRouteFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ServiceRouteClient<runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ServiceRoute that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ServiceRouteFindUniqueOrThrowArgs} args - Arguments to find a ServiceRoute
   * @example
   * // Get one ServiceRoute
   * const serviceRoute = await prisma.serviceRoute.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ServiceRouteFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ServiceRouteFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServiceRouteClient<runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ServiceRoute that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceRouteFindFirstArgs} args - Arguments to find a ServiceRoute
   * @example
   * // Get one ServiceRoute
   * const serviceRoute = await prisma.serviceRoute.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ServiceRouteFindFirstArgs>(args?: Prisma.SelectSubset<T, ServiceRouteFindFirstArgs<ExtArgs>>): Prisma.Prisma__ServiceRouteClient<runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ServiceRoute that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceRouteFindFirstOrThrowArgs} args - Arguments to find a ServiceRoute
   * @example
   * // Get one ServiceRoute
   * const serviceRoute = await prisma.serviceRoute.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ServiceRouteFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ServiceRouteFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServiceRouteClient<runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ServiceRoutes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceRouteFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ServiceRoutes
   * const serviceRoutes = await prisma.serviceRoute.findMany()
   * 
   * // Get first 10 ServiceRoutes
   * const serviceRoutes = await prisma.serviceRoute.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const serviceRouteWithIdOnly = await prisma.serviceRoute.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ServiceRouteFindManyArgs>(args?: Prisma.SelectSubset<T, ServiceRouteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ServiceRoute.
   * @param {ServiceRouteCreateArgs} args - Arguments to create a ServiceRoute.
   * @example
   * // Create one ServiceRoute
   * const ServiceRoute = await prisma.serviceRoute.create({
   *   data: {
   *     // ... data to create a ServiceRoute
   *   }
   * })
   * 
   */
  create<T extends ServiceRouteCreateArgs>(args: Prisma.SelectSubset<T, ServiceRouteCreateArgs<ExtArgs>>): Prisma.Prisma__ServiceRouteClient<runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ServiceRoutes.
   * @param {ServiceRouteCreateManyArgs} args - Arguments to create many ServiceRoutes.
   * @example
   * // Create many ServiceRoutes
   * const serviceRoute = await prisma.serviceRoute.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ServiceRouteCreateManyArgs>(args?: Prisma.SelectSubset<T, ServiceRouteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ServiceRoutes and returns the data saved in the database.
   * @param {ServiceRouteCreateManyAndReturnArgs} args - Arguments to create many ServiceRoutes.
   * @example
   * // Create many ServiceRoutes
   * const serviceRoute = await prisma.serviceRoute.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ServiceRoutes and only return the `id`
   * const serviceRouteWithIdOnly = await prisma.serviceRoute.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ServiceRouteCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ServiceRouteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ServiceRoute.
   * @param {ServiceRouteDeleteArgs} args - Arguments to delete one ServiceRoute.
   * @example
   * // Delete one ServiceRoute
   * const ServiceRoute = await prisma.serviceRoute.delete({
   *   where: {
   *     // ... filter to delete one ServiceRoute
   *   }
   * })
   * 
   */
  delete<T extends ServiceRouteDeleteArgs>(args: Prisma.SelectSubset<T, ServiceRouteDeleteArgs<ExtArgs>>): Prisma.Prisma__ServiceRouteClient<runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ServiceRoute.
   * @param {ServiceRouteUpdateArgs} args - Arguments to update one ServiceRoute.
   * @example
   * // Update one ServiceRoute
   * const serviceRoute = await prisma.serviceRoute.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ServiceRouteUpdateArgs>(args: Prisma.SelectSubset<T, ServiceRouteUpdateArgs<ExtArgs>>): Prisma.Prisma__ServiceRouteClient<runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ServiceRoutes.
   * @param {ServiceRouteDeleteManyArgs} args - Arguments to filter ServiceRoutes to delete.
   * @example
   * // Delete a few ServiceRoutes
   * const { count } = await prisma.serviceRoute.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ServiceRouteDeleteManyArgs>(args?: Prisma.SelectSubset<T, ServiceRouteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ServiceRoutes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceRouteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ServiceRoutes
   * const serviceRoute = await prisma.serviceRoute.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ServiceRouteUpdateManyArgs>(args: Prisma.SelectSubset<T, ServiceRouteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ServiceRoutes and returns the data updated in the database.
   * @param {ServiceRouteUpdateManyAndReturnArgs} args - Arguments to update many ServiceRoutes.
   * @example
   * // Update many ServiceRoutes
   * const serviceRoute = await prisma.serviceRoute.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ServiceRoutes and only return the `id`
   * const serviceRouteWithIdOnly = await prisma.serviceRoute.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ServiceRouteUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ServiceRouteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ServiceRoute.
   * @param {ServiceRouteUpsertArgs} args - Arguments to update or create a ServiceRoute.
   * @example
   * // Update or create a ServiceRoute
   * const serviceRoute = await prisma.serviceRoute.upsert({
   *   create: {
   *     // ... data to create a ServiceRoute
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ServiceRoute we want to update
   *   }
   * })
   */
  upsert<T extends ServiceRouteUpsertArgs>(args: Prisma.SelectSubset<T, ServiceRouteUpsertArgs<ExtArgs>>): Prisma.Prisma__ServiceRouteClient<runtime.Types.Result.GetResult<Prisma.$ServiceRoutePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ServiceRoutes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceRouteCountArgs} args - Arguments to filter ServiceRoutes to count.
   * @example
   * // Count the number of ServiceRoutes
   * const count = await prisma.serviceRoute.count({
   *   where: {
   *     // ... the filter for the ServiceRoutes we want to count
   *   }
   * })
  **/
  count<T extends ServiceRouteCountArgs>(
    args?: Prisma.Subset<T, ServiceRouteCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ServiceRouteCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ServiceRoute.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceRouteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ServiceRouteAggregateArgs>(args: Prisma.Subset<T, ServiceRouteAggregateArgs>): Prisma.PrismaPromise<GetServiceRouteAggregateType<T>>

  /**
   * Group by ServiceRoute.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceRouteGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ServiceRouteGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ServiceRouteGroupByArgs['orderBy'] }
      : { orderBy?: ServiceRouteGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ServiceRouteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceRouteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ServiceRoute model
 */
readonly fields: ServiceRouteFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ServiceRoute.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ServiceRouteClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  service<T extends Prisma.ServiceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ServiceDefaultArgs<ExtArgs>>): Prisma.Prisma__ServiceClient<runtime.Types.Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  createdBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  updatedBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ServiceRoute model
 */
export interface ServiceRouteFieldRefs {
  readonly id: Prisma.FieldRef<"ServiceRoute", 'Int'>
  readonly serviceId: Prisma.FieldRef<"ServiceRoute", 'String'>
  readonly order: Prisma.FieldRef<"ServiceRoute", 'Int'>
  readonly condition: Prisma.FieldRef<"ServiceRoute", 'String'>
  readonly description: Prisma.FieldRef<"ServiceRoute", 'String'>
  readonly createdAt: Prisma.FieldRef<"ServiceRoute", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ServiceRoute", 'DateTime'>
  readonly createdById: Prisma.FieldRef<"ServiceRoute", 'String'>
  readonly updatedById: Prisma.FieldRef<"ServiceRoute", 'String'>
}
    

// Custom InputTypes
/**
 * ServiceRoute findUnique
 */
export type ServiceRouteFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteInclude<ExtArgs> | null
  /**
   * Filter, which ServiceRoute to fetch.
   */
  where: Prisma.ServiceRouteWhereUniqueInput
}

/**
 * ServiceRoute findUniqueOrThrow
 */
export type ServiceRouteFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteInclude<ExtArgs> | null
  /**
   * Filter, which ServiceRoute to fetch.
   */
  where: Prisma.ServiceRouteWhereUniqueInput
}

/**
 * ServiceRoute findFirst
 */
export type ServiceRouteFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteInclude<ExtArgs> | null
  /**
   * Filter, which ServiceRoute to fetch.
   */
  where?: Prisma.ServiceRouteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServiceRoutes to fetch.
   */
  orderBy?: Prisma.ServiceRouteOrderByWithRelationInput | Prisma.ServiceRouteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ServiceRoutes.
   */
  cursor?: Prisma.ServiceRouteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServiceRoutes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServiceRoutes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ServiceRoutes.
   */
  distinct?: Prisma.ServiceRouteScalarFieldEnum | Prisma.ServiceRouteScalarFieldEnum[]
}

/**
 * ServiceRoute findFirstOrThrow
 */
export type ServiceRouteFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteInclude<ExtArgs> | null
  /**
   * Filter, which ServiceRoute to fetch.
   */
  where?: Prisma.ServiceRouteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServiceRoutes to fetch.
   */
  orderBy?: Prisma.ServiceRouteOrderByWithRelationInput | Prisma.ServiceRouteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ServiceRoutes.
   */
  cursor?: Prisma.ServiceRouteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServiceRoutes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServiceRoutes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ServiceRoutes.
   */
  distinct?: Prisma.ServiceRouteScalarFieldEnum | Prisma.ServiceRouteScalarFieldEnum[]
}

/**
 * ServiceRoute findMany
 */
export type ServiceRouteFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteInclude<ExtArgs> | null
  /**
   * Filter, which ServiceRoutes to fetch.
   */
  where?: Prisma.ServiceRouteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServiceRoutes to fetch.
   */
  orderBy?: Prisma.ServiceRouteOrderByWithRelationInput | Prisma.ServiceRouteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ServiceRoutes.
   */
  cursor?: Prisma.ServiceRouteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServiceRoutes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServiceRoutes.
   */
  skip?: number
  distinct?: Prisma.ServiceRouteScalarFieldEnum | Prisma.ServiceRouteScalarFieldEnum[]
}

/**
 * ServiceRoute create
 */
export type ServiceRouteCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteInclude<ExtArgs> | null
  /**
   * The data needed to create a ServiceRoute.
   */
  data: Prisma.XOR<Prisma.ServiceRouteCreateInput, Prisma.ServiceRouteUncheckedCreateInput>
}

/**
 * ServiceRoute createMany
 */
export type ServiceRouteCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ServiceRoutes.
   */
  data: Prisma.ServiceRouteCreateManyInput | Prisma.ServiceRouteCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ServiceRoute createManyAndReturn
 */
export type ServiceRouteCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * The data used to create many ServiceRoutes.
   */
  data: Prisma.ServiceRouteCreateManyInput | Prisma.ServiceRouteCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ServiceRoute update
 */
export type ServiceRouteUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteInclude<ExtArgs> | null
  /**
   * The data needed to update a ServiceRoute.
   */
  data: Prisma.XOR<Prisma.ServiceRouteUpdateInput, Prisma.ServiceRouteUncheckedUpdateInput>
  /**
   * Choose, which ServiceRoute to update.
   */
  where: Prisma.ServiceRouteWhereUniqueInput
}

/**
 * ServiceRoute updateMany
 */
export type ServiceRouteUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ServiceRoutes.
   */
  data: Prisma.XOR<Prisma.ServiceRouteUpdateManyMutationInput, Prisma.ServiceRouteUncheckedUpdateManyInput>
  /**
   * Filter which ServiceRoutes to update
   */
  where?: Prisma.ServiceRouteWhereInput
  /**
   * Limit how many ServiceRoutes to update.
   */
  limit?: number
}

/**
 * ServiceRoute updateManyAndReturn
 */
export type ServiceRouteUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * The data used to update ServiceRoutes.
   */
  data: Prisma.XOR<Prisma.ServiceRouteUpdateManyMutationInput, Prisma.ServiceRouteUncheckedUpdateManyInput>
  /**
   * Filter which ServiceRoutes to update
   */
  where?: Prisma.ServiceRouteWhereInput
  /**
   * Limit how many ServiceRoutes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ServiceRoute upsert
 */
export type ServiceRouteUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteInclude<ExtArgs> | null
  /**
   * The filter to search for the ServiceRoute to update in case it exists.
   */
  where: Prisma.ServiceRouteWhereUniqueInput
  /**
   * In case the ServiceRoute found by the `where` argument doesn't exist, create a new ServiceRoute with this data.
   */
  create: Prisma.XOR<Prisma.ServiceRouteCreateInput, Prisma.ServiceRouteUncheckedCreateInput>
  /**
   * In case the ServiceRoute was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ServiceRouteUpdateInput, Prisma.ServiceRouteUncheckedUpdateInput>
}

/**
 * ServiceRoute delete
 */
export type ServiceRouteDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteInclude<ExtArgs> | null
  /**
   * Filter which ServiceRoute to delete.
   */
  where: Prisma.ServiceRouteWhereUniqueInput
}

/**
 * ServiceRoute deleteMany
 */
export type ServiceRouteDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ServiceRoutes to delete
   */
  where?: Prisma.ServiceRouteWhereInput
  /**
   * Limit how many ServiceRoutes to delete.
   */
  limit?: number
}

/**
 * ServiceRoute without action
 */
export type ServiceRouteDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceRoute
   */
  select?: Prisma.ServiceRouteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceRoute
   */
  omit?: Prisma.ServiceRouteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceRouteInclude<ExtArgs> | null
}
