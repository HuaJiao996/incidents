
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `IncidentTypeSeverityCondition` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model IncidentTypeSeverityCondition
 * 
 */
export type IncidentTypeSeverityConditionModel = runtime.Types.Result.DefaultSelection<Prisma.$IncidentTypeSeverityConditionPayload>

export type AggregateIncidentTypeSeverityCondition = {
  _count: IncidentTypeSeverityConditionCountAggregateOutputType | null
  _avg: IncidentTypeSeverityConditionAvgAggregateOutputType | null
  _sum: IncidentTypeSeverityConditionSumAggregateOutputType | null
  _min: IncidentTypeSeverityConditionMinAggregateOutputType | null
  _max: IncidentTypeSeverityConditionMaxAggregateOutputType | null
}

export type IncidentTypeSeverityConditionAvgAggregateOutputType = {
  id: number | null
  incidentTypeId: number | null
  order: number | null
}

export type IncidentTypeSeverityConditionSumAggregateOutputType = {
  id: number | null
  incidentTypeId: number | null
  order: number | null
}

export type IncidentTypeSeverityConditionMinAggregateOutputType = {
  id: number | null
  severity: $Enums.IncidentSeverity | null
  incidentTypeId: number | null
  condition: string | null
  order: number | null
}

export type IncidentTypeSeverityConditionMaxAggregateOutputType = {
  id: number | null
  severity: $Enums.IncidentSeverity | null
  incidentTypeId: number | null
  condition: string | null
  order: number | null
}

export type IncidentTypeSeverityConditionCountAggregateOutputType = {
  id: number
  severity: number
  incidentTypeId: number
  condition: number
  order: number
  _all: number
}


export type IncidentTypeSeverityConditionAvgAggregateInputType = {
  id?: true
  incidentTypeId?: true
  order?: true
}

export type IncidentTypeSeverityConditionSumAggregateInputType = {
  id?: true
  incidentTypeId?: true
  order?: true
}

export type IncidentTypeSeverityConditionMinAggregateInputType = {
  id?: true
  severity?: true
  incidentTypeId?: true
  condition?: true
  order?: true
}

export type IncidentTypeSeverityConditionMaxAggregateInputType = {
  id?: true
  severity?: true
  incidentTypeId?: true
  condition?: true
  order?: true
}

export type IncidentTypeSeverityConditionCountAggregateInputType = {
  id?: true
  severity?: true
  incidentTypeId?: true
  condition?: true
  order?: true
  _all?: true
}

export type IncidentTypeSeverityConditionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IncidentTypeSeverityCondition to aggregate.
   */
  where?: Prisma.IncidentTypeSeverityConditionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncidentTypeSeverityConditions to fetch.
   */
  orderBy?: Prisma.IncidentTypeSeverityConditionOrderByWithRelationInput | Prisma.IncidentTypeSeverityConditionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncidentTypeSeverityConditions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncidentTypeSeverityConditions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned IncidentTypeSeverityConditions
  **/
  _count?: true | IncidentTypeSeverityConditionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IncidentTypeSeverityConditionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IncidentTypeSeverityConditionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IncidentTypeSeverityConditionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IncidentTypeSeverityConditionMaxAggregateInputType
}

export type GetIncidentTypeSeverityConditionAggregateType<T extends IncidentTypeSeverityConditionAggregateArgs> = {
      [P in keyof T & keyof AggregateIncidentTypeSeverityCondition]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIncidentTypeSeverityCondition[P]>
    : Prisma.GetScalarType<T[P], AggregateIncidentTypeSeverityCondition[P]>
}




export type IncidentTypeSeverityConditionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IncidentTypeSeverityConditionWhereInput
  orderBy?: Prisma.IncidentTypeSeverityConditionOrderByWithAggregationInput | Prisma.IncidentTypeSeverityConditionOrderByWithAggregationInput[]
  by: Prisma.IncidentTypeSeverityConditionScalarFieldEnum[] | Prisma.IncidentTypeSeverityConditionScalarFieldEnum
  having?: Prisma.IncidentTypeSeverityConditionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IncidentTypeSeverityConditionCountAggregateInputType | true
  _avg?: IncidentTypeSeverityConditionAvgAggregateInputType
  _sum?: IncidentTypeSeverityConditionSumAggregateInputType
  _min?: IncidentTypeSeverityConditionMinAggregateInputType
  _max?: IncidentTypeSeverityConditionMaxAggregateInputType
}

export type IncidentTypeSeverityConditionGroupByOutputType = {
  id: number
  severity: $Enums.IncidentSeverity
  incidentTypeId: number
  condition: string
  order: number
  _count: IncidentTypeSeverityConditionCountAggregateOutputType | null
  _avg: IncidentTypeSeverityConditionAvgAggregateOutputType | null
  _sum: IncidentTypeSeverityConditionSumAggregateOutputType | null
  _min: IncidentTypeSeverityConditionMinAggregateOutputType | null
  _max: IncidentTypeSeverityConditionMaxAggregateOutputType | null
}

type GetIncidentTypeSeverityConditionGroupByPayload<T extends IncidentTypeSeverityConditionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IncidentTypeSeverityConditionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IncidentTypeSeverityConditionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IncidentTypeSeverityConditionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IncidentTypeSeverityConditionGroupByOutputType[P]>
      }
    >
  >



export type IncidentTypeSeverityConditionWhereInput = {
  AND?: Prisma.IncidentTypeSeverityConditionWhereInput | Prisma.IncidentTypeSeverityConditionWhereInput[]
  OR?: Prisma.IncidentTypeSeverityConditionWhereInput[]
  NOT?: Prisma.IncidentTypeSeverityConditionWhereInput | Prisma.IncidentTypeSeverityConditionWhereInput[]
  id?: Prisma.IntFilter<"IncidentTypeSeverityCondition"> | number
  severity?: Prisma.EnumIncidentSeverityFilter<"IncidentTypeSeverityCondition"> | $Enums.IncidentSeverity
  incidentTypeId?: Prisma.IntFilter<"IncidentTypeSeverityCondition"> | number
  condition?: Prisma.StringFilter<"IncidentTypeSeverityCondition"> | string
  order?: Prisma.IntFilter<"IncidentTypeSeverityCondition"> | number
  incidentType?: Prisma.XOR<Prisma.IncidentTypeScalarRelationFilter, Prisma.IncidentTypeWhereInput>
}

export type IncidentTypeSeverityConditionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  incidentTypeId?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  order?: Prisma.SortOrder
  incidentType?: Prisma.IncidentTypeOrderByWithRelationInput
}

export type IncidentTypeSeverityConditionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.IncidentTypeSeverityConditionWhereInput | Prisma.IncidentTypeSeverityConditionWhereInput[]
  OR?: Prisma.IncidentTypeSeverityConditionWhereInput[]
  NOT?: Prisma.IncidentTypeSeverityConditionWhereInput | Prisma.IncidentTypeSeverityConditionWhereInput[]
  severity?: Prisma.EnumIncidentSeverityFilter<"IncidentTypeSeverityCondition"> | $Enums.IncidentSeverity
  incidentTypeId?: Prisma.IntFilter<"IncidentTypeSeverityCondition"> | number
  condition?: Prisma.StringFilter<"IncidentTypeSeverityCondition"> | string
  order?: Prisma.IntFilter<"IncidentTypeSeverityCondition"> | number
  incidentType?: Prisma.XOR<Prisma.IncidentTypeScalarRelationFilter, Prisma.IncidentTypeWhereInput>
}, "id">

export type IncidentTypeSeverityConditionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  incidentTypeId?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  order?: Prisma.SortOrder
  _count?: Prisma.IncidentTypeSeverityConditionCountOrderByAggregateInput
  _avg?: Prisma.IncidentTypeSeverityConditionAvgOrderByAggregateInput
  _max?: Prisma.IncidentTypeSeverityConditionMaxOrderByAggregateInput
  _min?: Prisma.IncidentTypeSeverityConditionMinOrderByAggregateInput
  _sum?: Prisma.IncidentTypeSeverityConditionSumOrderByAggregateInput
}

export type IncidentTypeSeverityConditionScalarWhereWithAggregatesInput = {
  AND?: Prisma.IncidentTypeSeverityConditionScalarWhereWithAggregatesInput | Prisma.IncidentTypeSeverityConditionScalarWhereWithAggregatesInput[]
  OR?: Prisma.IncidentTypeSeverityConditionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IncidentTypeSeverityConditionScalarWhereWithAggregatesInput | Prisma.IncidentTypeSeverityConditionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"IncidentTypeSeverityCondition"> | number
  severity?: Prisma.EnumIncidentSeverityWithAggregatesFilter<"IncidentTypeSeverityCondition"> | $Enums.IncidentSeverity
  incidentTypeId?: Prisma.IntWithAggregatesFilter<"IncidentTypeSeverityCondition"> | number
  condition?: Prisma.StringWithAggregatesFilter<"IncidentTypeSeverityCondition"> | string
  order?: Prisma.IntWithAggregatesFilter<"IncidentTypeSeverityCondition"> | number
}

export type IncidentTypeSeverityConditionCreateInput = {
  severity: $Enums.IncidentSeverity
  condition: string
  order: number
  incidentType: Prisma.IncidentTypeCreateNestedOneWithoutSeverityConditionsInput
}

export type IncidentTypeSeverityConditionUncheckedCreateInput = {
  id?: number
  severity: $Enums.IncidentSeverity
  incidentTypeId: number
  condition: string
  order: number
}

export type IncidentTypeSeverityConditionUpdateInput = {
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  incidentType?: Prisma.IncidentTypeUpdateOneRequiredWithoutSeverityConditionsNestedInput
}

export type IncidentTypeSeverityConditionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  incidentTypeId?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type IncidentTypeSeverityConditionCreateManyInput = {
  id?: number
  severity: $Enums.IncidentSeverity
  incidentTypeId: number
  condition: string
  order: number
}

export type IncidentTypeSeverityConditionUpdateManyMutationInput = {
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type IncidentTypeSeverityConditionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  incidentTypeId?: Prisma.IntFieldUpdateOperationsInput | number
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type IncidentTypeSeverityConditionListRelationFilter = {
  every?: Prisma.IncidentTypeSeverityConditionWhereInput
  some?: Prisma.IncidentTypeSeverityConditionWhereInput
  none?: Prisma.IncidentTypeSeverityConditionWhereInput
}

export type IncidentTypeSeverityConditionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IncidentTypeSeverityConditionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  incidentTypeId?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type IncidentTypeSeverityConditionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  incidentTypeId?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type IncidentTypeSeverityConditionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  incidentTypeId?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type IncidentTypeSeverityConditionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  incidentTypeId?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type IncidentTypeSeverityConditionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  incidentTypeId?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type IncidentTypeSeverityConditionCreateNestedManyWithoutIncidentTypeInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeSeverityConditionCreateWithoutIncidentTypeInput, Prisma.IncidentTypeSeverityConditionUncheckedCreateWithoutIncidentTypeInput> | Prisma.IncidentTypeSeverityConditionCreateWithoutIncidentTypeInput[] | Prisma.IncidentTypeSeverityConditionUncheckedCreateWithoutIncidentTypeInput[]
  connectOrCreate?: Prisma.IncidentTypeSeverityConditionCreateOrConnectWithoutIncidentTypeInput | Prisma.IncidentTypeSeverityConditionCreateOrConnectWithoutIncidentTypeInput[]
  createMany?: Prisma.IncidentTypeSeverityConditionCreateManyIncidentTypeInputEnvelope
  connect?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput | Prisma.IncidentTypeSeverityConditionWhereUniqueInput[]
}

export type IncidentTypeSeverityConditionUncheckedCreateNestedManyWithoutIncidentTypeInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeSeverityConditionCreateWithoutIncidentTypeInput, Prisma.IncidentTypeSeverityConditionUncheckedCreateWithoutIncidentTypeInput> | Prisma.IncidentTypeSeverityConditionCreateWithoutIncidentTypeInput[] | Prisma.IncidentTypeSeverityConditionUncheckedCreateWithoutIncidentTypeInput[]
  connectOrCreate?: Prisma.IncidentTypeSeverityConditionCreateOrConnectWithoutIncidentTypeInput | Prisma.IncidentTypeSeverityConditionCreateOrConnectWithoutIncidentTypeInput[]
  createMany?: Prisma.IncidentTypeSeverityConditionCreateManyIncidentTypeInputEnvelope
  connect?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput | Prisma.IncidentTypeSeverityConditionWhereUniqueInput[]
}

export type IncidentTypeSeverityConditionUpdateManyWithoutIncidentTypeNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeSeverityConditionCreateWithoutIncidentTypeInput, Prisma.IncidentTypeSeverityConditionUncheckedCreateWithoutIncidentTypeInput> | Prisma.IncidentTypeSeverityConditionCreateWithoutIncidentTypeInput[] | Prisma.IncidentTypeSeverityConditionUncheckedCreateWithoutIncidentTypeInput[]
  connectOrCreate?: Prisma.IncidentTypeSeverityConditionCreateOrConnectWithoutIncidentTypeInput | Prisma.IncidentTypeSeverityConditionCreateOrConnectWithoutIncidentTypeInput[]
  upsert?: Prisma.IncidentTypeSeverityConditionUpsertWithWhereUniqueWithoutIncidentTypeInput | Prisma.IncidentTypeSeverityConditionUpsertWithWhereUniqueWithoutIncidentTypeInput[]
  createMany?: Prisma.IncidentTypeSeverityConditionCreateManyIncidentTypeInputEnvelope
  set?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput | Prisma.IncidentTypeSeverityConditionWhereUniqueInput[]
  disconnect?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput | Prisma.IncidentTypeSeverityConditionWhereUniqueInput[]
  delete?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput | Prisma.IncidentTypeSeverityConditionWhereUniqueInput[]
  connect?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput | Prisma.IncidentTypeSeverityConditionWhereUniqueInput[]
  update?: Prisma.IncidentTypeSeverityConditionUpdateWithWhereUniqueWithoutIncidentTypeInput | Prisma.IncidentTypeSeverityConditionUpdateWithWhereUniqueWithoutIncidentTypeInput[]
  updateMany?: Prisma.IncidentTypeSeverityConditionUpdateManyWithWhereWithoutIncidentTypeInput | Prisma.IncidentTypeSeverityConditionUpdateManyWithWhereWithoutIncidentTypeInput[]
  deleteMany?: Prisma.IncidentTypeSeverityConditionScalarWhereInput | Prisma.IncidentTypeSeverityConditionScalarWhereInput[]
}

export type IncidentTypeSeverityConditionUncheckedUpdateManyWithoutIncidentTypeNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeSeverityConditionCreateWithoutIncidentTypeInput, Prisma.IncidentTypeSeverityConditionUncheckedCreateWithoutIncidentTypeInput> | Prisma.IncidentTypeSeverityConditionCreateWithoutIncidentTypeInput[] | Prisma.IncidentTypeSeverityConditionUncheckedCreateWithoutIncidentTypeInput[]
  connectOrCreate?: Prisma.IncidentTypeSeverityConditionCreateOrConnectWithoutIncidentTypeInput | Prisma.IncidentTypeSeverityConditionCreateOrConnectWithoutIncidentTypeInput[]
  upsert?: Prisma.IncidentTypeSeverityConditionUpsertWithWhereUniqueWithoutIncidentTypeInput | Prisma.IncidentTypeSeverityConditionUpsertWithWhereUniqueWithoutIncidentTypeInput[]
  createMany?: Prisma.IncidentTypeSeverityConditionCreateManyIncidentTypeInputEnvelope
  set?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput | Prisma.IncidentTypeSeverityConditionWhereUniqueInput[]
  disconnect?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput | Prisma.IncidentTypeSeverityConditionWhereUniqueInput[]
  delete?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput | Prisma.IncidentTypeSeverityConditionWhereUniqueInput[]
  connect?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput | Prisma.IncidentTypeSeverityConditionWhereUniqueInput[]
  update?: Prisma.IncidentTypeSeverityConditionUpdateWithWhereUniqueWithoutIncidentTypeInput | Prisma.IncidentTypeSeverityConditionUpdateWithWhereUniqueWithoutIncidentTypeInput[]
  updateMany?: Prisma.IncidentTypeSeverityConditionUpdateManyWithWhereWithoutIncidentTypeInput | Prisma.IncidentTypeSeverityConditionUpdateManyWithWhereWithoutIncidentTypeInput[]
  deleteMany?: Prisma.IncidentTypeSeverityConditionScalarWhereInput | Prisma.IncidentTypeSeverityConditionScalarWhereInput[]
}

export type EnumIncidentSeverityFieldUpdateOperationsInput = {
  set?: $Enums.IncidentSeverity
}

export type IncidentTypeSeverityConditionCreateWithoutIncidentTypeInput = {
  severity: $Enums.IncidentSeverity
  condition: string
  order: number
}

export type IncidentTypeSeverityConditionUncheckedCreateWithoutIncidentTypeInput = {
  id?: number
  severity: $Enums.IncidentSeverity
  condition: string
  order: number
}

export type IncidentTypeSeverityConditionCreateOrConnectWithoutIncidentTypeInput = {
  where: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
  create: Prisma.XOR<Prisma.IncidentTypeSeverityConditionCreateWithoutIncidentTypeInput, Prisma.IncidentTypeSeverityConditionUncheckedCreateWithoutIncidentTypeInput>
}

export type IncidentTypeSeverityConditionCreateManyIncidentTypeInputEnvelope = {
  data: Prisma.IncidentTypeSeverityConditionCreateManyIncidentTypeInput | Prisma.IncidentTypeSeverityConditionCreateManyIncidentTypeInput[]
  skipDuplicates?: boolean
}

export type IncidentTypeSeverityConditionUpsertWithWhereUniqueWithoutIncidentTypeInput = {
  where: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
  update: Prisma.XOR<Prisma.IncidentTypeSeverityConditionUpdateWithoutIncidentTypeInput, Prisma.IncidentTypeSeverityConditionUncheckedUpdateWithoutIncidentTypeInput>
  create: Prisma.XOR<Prisma.IncidentTypeSeverityConditionCreateWithoutIncidentTypeInput, Prisma.IncidentTypeSeverityConditionUncheckedCreateWithoutIncidentTypeInput>
}

export type IncidentTypeSeverityConditionUpdateWithWhereUniqueWithoutIncidentTypeInput = {
  where: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
  data: Prisma.XOR<Prisma.IncidentTypeSeverityConditionUpdateWithoutIncidentTypeInput, Prisma.IncidentTypeSeverityConditionUncheckedUpdateWithoutIncidentTypeInput>
}

export type IncidentTypeSeverityConditionUpdateManyWithWhereWithoutIncidentTypeInput = {
  where: Prisma.IncidentTypeSeverityConditionScalarWhereInput
  data: Prisma.XOR<Prisma.IncidentTypeSeverityConditionUpdateManyMutationInput, Prisma.IncidentTypeSeverityConditionUncheckedUpdateManyWithoutIncidentTypeInput>
}

export type IncidentTypeSeverityConditionScalarWhereInput = {
  AND?: Prisma.IncidentTypeSeverityConditionScalarWhereInput | Prisma.IncidentTypeSeverityConditionScalarWhereInput[]
  OR?: Prisma.IncidentTypeSeverityConditionScalarWhereInput[]
  NOT?: Prisma.IncidentTypeSeverityConditionScalarWhereInput | Prisma.IncidentTypeSeverityConditionScalarWhereInput[]
  id?: Prisma.IntFilter<"IncidentTypeSeverityCondition"> | number
  severity?: Prisma.EnumIncidentSeverityFilter<"IncidentTypeSeverityCondition"> | $Enums.IncidentSeverity
  incidentTypeId?: Prisma.IntFilter<"IncidentTypeSeverityCondition"> | number
  condition?: Prisma.StringFilter<"IncidentTypeSeverityCondition"> | string
  order?: Prisma.IntFilter<"IncidentTypeSeverityCondition"> | number
}

export type IncidentTypeSeverityConditionCreateManyIncidentTypeInput = {
  id?: number
  severity: $Enums.IncidentSeverity
  condition: string
  order: number
}

export type IncidentTypeSeverityConditionUpdateWithoutIncidentTypeInput = {
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type IncidentTypeSeverityConditionUncheckedUpdateWithoutIncidentTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type IncidentTypeSeverityConditionUncheckedUpdateManyWithoutIncidentTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
}



export type IncidentTypeSeverityConditionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  severity?: boolean
  incidentTypeId?: boolean
  condition?: boolean
  order?: boolean
  incidentType?: boolean | Prisma.IncidentTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incidentTypeSeverityCondition"]>

export type IncidentTypeSeverityConditionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  severity?: boolean
  incidentTypeId?: boolean
  condition?: boolean
  order?: boolean
  incidentType?: boolean | Prisma.IncidentTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incidentTypeSeverityCondition"]>

export type IncidentTypeSeverityConditionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  severity?: boolean
  incidentTypeId?: boolean
  condition?: boolean
  order?: boolean
  incidentType?: boolean | Prisma.IncidentTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incidentTypeSeverityCondition"]>

export type IncidentTypeSeverityConditionSelectScalar = {
  id?: boolean
  severity?: boolean
  incidentTypeId?: boolean
  condition?: boolean
  order?: boolean
}

export type IncidentTypeSeverityConditionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "severity" | "incidentTypeId" | "condition" | "order", ExtArgs["result"]["incidentTypeSeverityCondition"]>
export type IncidentTypeSeverityConditionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  incidentType?: boolean | Prisma.IncidentTypeDefaultArgs<ExtArgs>
}
export type IncidentTypeSeverityConditionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  incidentType?: boolean | Prisma.IncidentTypeDefaultArgs<ExtArgs>
}
export type IncidentTypeSeverityConditionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  incidentType?: boolean | Prisma.IncidentTypeDefaultArgs<ExtArgs>
}

export type $IncidentTypeSeverityConditionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "IncidentTypeSeverityCondition"
  objects: {
    incidentType: Prisma.$IncidentTypePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    severity: $Enums.IncidentSeverity
    incidentTypeId: number
    condition: string
    order: number
  }, ExtArgs["result"]["incidentTypeSeverityCondition"]>
  composites: {}
}

export type IncidentTypeSeverityConditionGetPayload<S extends boolean | null | undefined | IncidentTypeSeverityConditionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload, S>

export type IncidentTypeSeverityConditionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IncidentTypeSeverityConditionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IncidentTypeSeverityConditionCountAggregateInputType | true
  }

export interface IncidentTypeSeverityConditionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IncidentTypeSeverityCondition'], meta: { name: 'IncidentTypeSeverityCondition' } }
  /**
   * Find zero or one IncidentTypeSeverityCondition that matches the filter.
   * @param {IncidentTypeSeverityConditionFindUniqueArgs} args - Arguments to find a IncidentTypeSeverityCondition
   * @example
   * // Get one IncidentTypeSeverityCondition
   * const incidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IncidentTypeSeverityConditionFindUniqueArgs>(args: Prisma.SelectSubset<T, IncidentTypeSeverityConditionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeSeverityConditionClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one IncidentTypeSeverityCondition that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IncidentTypeSeverityConditionFindUniqueOrThrowArgs} args - Arguments to find a IncidentTypeSeverityCondition
   * @example
   * // Get one IncidentTypeSeverityCondition
   * const incidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IncidentTypeSeverityConditionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IncidentTypeSeverityConditionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeSeverityConditionClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IncidentTypeSeverityCondition that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeSeverityConditionFindFirstArgs} args - Arguments to find a IncidentTypeSeverityCondition
   * @example
   * // Get one IncidentTypeSeverityCondition
   * const incidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IncidentTypeSeverityConditionFindFirstArgs>(args?: Prisma.SelectSubset<T, IncidentTypeSeverityConditionFindFirstArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeSeverityConditionClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IncidentTypeSeverityCondition that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeSeverityConditionFindFirstOrThrowArgs} args - Arguments to find a IncidentTypeSeverityCondition
   * @example
   * // Get one IncidentTypeSeverityCondition
   * const incidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IncidentTypeSeverityConditionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IncidentTypeSeverityConditionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeSeverityConditionClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more IncidentTypeSeverityConditions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeSeverityConditionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all IncidentTypeSeverityConditions
   * const incidentTypeSeverityConditions = await prisma.incidentTypeSeverityCondition.findMany()
   * 
   * // Get first 10 IncidentTypeSeverityConditions
   * const incidentTypeSeverityConditions = await prisma.incidentTypeSeverityCondition.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const incidentTypeSeverityConditionWithIdOnly = await prisma.incidentTypeSeverityCondition.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IncidentTypeSeverityConditionFindManyArgs>(args?: Prisma.SelectSubset<T, IncidentTypeSeverityConditionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a IncidentTypeSeverityCondition.
   * @param {IncidentTypeSeverityConditionCreateArgs} args - Arguments to create a IncidentTypeSeverityCondition.
   * @example
   * // Create one IncidentTypeSeverityCondition
   * const IncidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.create({
   *   data: {
   *     // ... data to create a IncidentTypeSeverityCondition
   *   }
   * })
   * 
   */
  create<T extends IncidentTypeSeverityConditionCreateArgs>(args: Prisma.SelectSubset<T, IncidentTypeSeverityConditionCreateArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeSeverityConditionClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many IncidentTypeSeverityConditions.
   * @param {IncidentTypeSeverityConditionCreateManyArgs} args - Arguments to create many IncidentTypeSeverityConditions.
   * @example
   * // Create many IncidentTypeSeverityConditions
   * const incidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IncidentTypeSeverityConditionCreateManyArgs>(args?: Prisma.SelectSubset<T, IncidentTypeSeverityConditionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many IncidentTypeSeverityConditions and returns the data saved in the database.
   * @param {IncidentTypeSeverityConditionCreateManyAndReturnArgs} args - Arguments to create many IncidentTypeSeverityConditions.
   * @example
   * // Create many IncidentTypeSeverityConditions
   * const incidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many IncidentTypeSeverityConditions and only return the `id`
   * const incidentTypeSeverityConditionWithIdOnly = await prisma.incidentTypeSeverityCondition.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IncidentTypeSeverityConditionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IncidentTypeSeverityConditionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a IncidentTypeSeverityCondition.
   * @param {IncidentTypeSeverityConditionDeleteArgs} args - Arguments to delete one IncidentTypeSeverityCondition.
   * @example
   * // Delete one IncidentTypeSeverityCondition
   * const IncidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.delete({
   *   where: {
   *     // ... filter to delete one IncidentTypeSeverityCondition
   *   }
   * })
   * 
   */
  delete<T extends IncidentTypeSeverityConditionDeleteArgs>(args: Prisma.SelectSubset<T, IncidentTypeSeverityConditionDeleteArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeSeverityConditionClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one IncidentTypeSeverityCondition.
   * @param {IncidentTypeSeverityConditionUpdateArgs} args - Arguments to update one IncidentTypeSeverityCondition.
   * @example
   * // Update one IncidentTypeSeverityCondition
   * const incidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IncidentTypeSeverityConditionUpdateArgs>(args: Prisma.SelectSubset<T, IncidentTypeSeverityConditionUpdateArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeSeverityConditionClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more IncidentTypeSeverityConditions.
   * @param {IncidentTypeSeverityConditionDeleteManyArgs} args - Arguments to filter IncidentTypeSeverityConditions to delete.
   * @example
   * // Delete a few IncidentTypeSeverityConditions
   * const { count } = await prisma.incidentTypeSeverityCondition.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IncidentTypeSeverityConditionDeleteManyArgs>(args?: Prisma.SelectSubset<T, IncidentTypeSeverityConditionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IncidentTypeSeverityConditions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeSeverityConditionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many IncidentTypeSeverityConditions
   * const incidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IncidentTypeSeverityConditionUpdateManyArgs>(args: Prisma.SelectSubset<T, IncidentTypeSeverityConditionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IncidentTypeSeverityConditions and returns the data updated in the database.
   * @param {IncidentTypeSeverityConditionUpdateManyAndReturnArgs} args - Arguments to update many IncidentTypeSeverityConditions.
   * @example
   * // Update many IncidentTypeSeverityConditions
   * const incidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more IncidentTypeSeverityConditions and only return the `id`
   * const incidentTypeSeverityConditionWithIdOnly = await prisma.incidentTypeSeverityCondition.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IncidentTypeSeverityConditionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IncidentTypeSeverityConditionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one IncidentTypeSeverityCondition.
   * @param {IncidentTypeSeverityConditionUpsertArgs} args - Arguments to update or create a IncidentTypeSeverityCondition.
   * @example
   * // Update or create a IncidentTypeSeverityCondition
   * const incidentTypeSeverityCondition = await prisma.incidentTypeSeverityCondition.upsert({
   *   create: {
   *     // ... data to create a IncidentTypeSeverityCondition
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the IncidentTypeSeverityCondition we want to update
   *   }
   * })
   */
  upsert<T extends IncidentTypeSeverityConditionUpsertArgs>(args: Prisma.SelectSubset<T, IncidentTypeSeverityConditionUpsertArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeSeverityConditionClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of IncidentTypeSeverityConditions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeSeverityConditionCountArgs} args - Arguments to filter IncidentTypeSeverityConditions to count.
   * @example
   * // Count the number of IncidentTypeSeverityConditions
   * const count = await prisma.incidentTypeSeverityCondition.count({
   *   where: {
   *     // ... the filter for the IncidentTypeSeverityConditions we want to count
   *   }
   * })
  **/
  count<T extends IncidentTypeSeverityConditionCountArgs>(
    args?: Prisma.Subset<T, IncidentTypeSeverityConditionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IncidentTypeSeverityConditionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a IncidentTypeSeverityCondition.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeSeverityConditionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IncidentTypeSeverityConditionAggregateArgs>(args: Prisma.Subset<T, IncidentTypeSeverityConditionAggregateArgs>): Prisma.PrismaPromise<GetIncidentTypeSeverityConditionAggregateType<T>>

  /**
   * Group by IncidentTypeSeverityCondition.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeSeverityConditionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IncidentTypeSeverityConditionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IncidentTypeSeverityConditionGroupByArgs['orderBy'] }
      : { orderBy?: IncidentTypeSeverityConditionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IncidentTypeSeverityConditionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncidentTypeSeverityConditionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the IncidentTypeSeverityCondition model
 */
readonly fields: IncidentTypeSeverityConditionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for IncidentTypeSeverityCondition.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IncidentTypeSeverityConditionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  incidentType<T extends Prisma.IncidentTypeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IncidentTypeDefaultArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the IncidentTypeSeverityCondition model
 */
export interface IncidentTypeSeverityConditionFieldRefs {
  readonly id: Prisma.FieldRef<"IncidentTypeSeverityCondition", 'Int'>
  readonly severity: Prisma.FieldRef<"IncidentTypeSeverityCondition", 'IncidentSeverity'>
  readonly incidentTypeId: Prisma.FieldRef<"IncidentTypeSeverityCondition", 'Int'>
  readonly condition: Prisma.FieldRef<"IncidentTypeSeverityCondition", 'String'>
  readonly order: Prisma.FieldRef<"IncidentTypeSeverityCondition", 'Int'>
}
    

// Custom InputTypes
/**
 * IncidentTypeSeverityCondition findUnique
 */
export type IncidentTypeSeverityConditionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionInclude<ExtArgs> | null
  /**
   * Filter, which IncidentTypeSeverityCondition to fetch.
   */
  where: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
}

/**
 * IncidentTypeSeverityCondition findUniqueOrThrow
 */
export type IncidentTypeSeverityConditionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionInclude<ExtArgs> | null
  /**
   * Filter, which IncidentTypeSeverityCondition to fetch.
   */
  where: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
}

/**
 * IncidentTypeSeverityCondition findFirst
 */
export type IncidentTypeSeverityConditionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionInclude<ExtArgs> | null
  /**
   * Filter, which IncidentTypeSeverityCondition to fetch.
   */
  where?: Prisma.IncidentTypeSeverityConditionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncidentTypeSeverityConditions to fetch.
   */
  orderBy?: Prisma.IncidentTypeSeverityConditionOrderByWithRelationInput | Prisma.IncidentTypeSeverityConditionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IncidentTypeSeverityConditions.
   */
  cursor?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncidentTypeSeverityConditions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncidentTypeSeverityConditions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IncidentTypeSeverityConditions.
   */
  distinct?: Prisma.IncidentTypeSeverityConditionScalarFieldEnum | Prisma.IncidentTypeSeverityConditionScalarFieldEnum[]
}

/**
 * IncidentTypeSeverityCondition findFirstOrThrow
 */
export type IncidentTypeSeverityConditionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionInclude<ExtArgs> | null
  /**
   * Filter, which IncidentTypeSeverityCondition to fetch.
   */
  where?: Prisma.IncidentTypeSeverityConditionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncidentTypeSeverityConditions to fetch.
   */
  orderBy?: Prisma.IncidentTypeSeverityConditionOrderByWithRelationInput | Prisma.IncidentTypeSeverityConditionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IncidentTypeSeverityConditions.
   */
  cursor?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncidentTypeSeverityConditions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncidentTypeSeverityConditions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IncidentTypeSeverityConditions.
   */
  distinct?: Prisma.IncidentTypeSeverityConditionScalarFieldEnum | Prisma.IncidentTypeSeverityConditionScalarFieldEnum[]
}

/**
 * IncidentTypeSeverityCondition findMany
 */
export type IncidentTypeSeverityConditionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionInclude<ExtArgs> | null
  /**
   * Filter, which IncidentTypeSeverityConditions to fetch.
   */
  where?: Prisma.IncidentTypeSeverityConditionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncidentTypeSeverityConditions to fetch.
   */
  orderBy?: Prisma.IncidentTypeSeverityConditionOrderByWithRelationInput | Prisma.IncidentTypeSeverityConditionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing IncidentTypeSeverityConditions.
   */
  cursor?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncidentTypeSeverityConditions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncidentTypeSeverityConditions.
   */
  skip?: number
  distinct?: Prisma.IncidentTypeSeverityConditionScalarFieldEnum | Prisma.IncidentTypeSeverityConditionScalarFieldEnum[]
}

/**
 * IncidentTypeSeverityCondition create
 */
export type IncidentTypeSeverityConditionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionInclude<ExtArgs> | null
  /**
   * The data needed to create a IncidentTypeSeverityCondition.
   */
  data: Prisma.XOR<Prisma.IncidentTypeSeverityConditionCreateInput, Prisma.IncidentTypeSeverityConditionUncheckedCreateInput>
}

/**
 * IncidentTypeSeverityCondition createMany
 */
export type IncidentTypeSeverityConditionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many IncidentTypeSeverityConditions.
   */
  data: Prisma.IncidentTypeSeverityConditionCreateManyInput | Prisma.IncidentTypeSeverityConditionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IncidentTypeSeverityCondition createManyAndReturn
 */
export type IncidentTypeSeverityConditionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * The data used to create many IncidentTypeSeverityConditions.
   */
  data: Prisma.IncidentTypeSeverityConditionCreateManyInput | Prisma.IncidentTypeSeverityConditionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * IncidentTypeSeverityCondition update
 */
export type IncidentTypeSeverityConditionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionInclude<ExtArgs> | null
  /**
   * The data needed to update a IncidentTypeSeverityCondition.
   */
  data: Prisma.XOR<Prisma.IncidentTypeSeverityConditionUpdateInput, Prisma.IncidentTypeSeverityConditionUncheckedUpdateInput>
  /**
   * Choose, which IncidentTypeSeverityCondition to update.
   */
  where: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
}

/**
 * IncidentTypeSeverityCondition updateMany
 */
export type IncidentTypeSeverityConditionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update IncidentTypeSeverityConditions.
   */
  data: Prisma.XOR<Prisma.IncidentTypeSeverityConditionUpdateManyMutationInput, Prisma.IncidentTypeSeverityConditionUncheckedUpdateManyInput>
  /**
   * Filter which IncidentTypeSeverityConditions to update
   */
  where?: Prisma.IncidentTypeSeverityConditionWhereInput
  /**
   * Limit how many IncidentTypeSeverityConditions to update.
   */
  limit?: number
}

/**
 * IncidentTypeSeverityCondition updateManyAndReturn
 */
export type IncidentTypeSeverityConditionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * The data used to update IncidentTypeSeverityConditions.
   */
  data: Prisma.XOR<Prisma.IncidentTypeSeverityConditionUpdateManyMutationInput, Prisma.IncidentTypeSeverityConditionUncheckedUpdateManyInput>
  /**
   * Filter which IncidentTypeSeverityConditions to update
   */
  where?: Prisma.IncidentTypeSeverityConditionWhereInput
  /**
   * Limit how many IncidentTypeSeverityConditions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * IncidentTypeSeverityCondition upsert
 */
export type IncidentTypeSeverityConditionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionInclude<ExtArgs> | null
  /**
   * The filter to search for the IncidentTypeSeverityCondition to update in case it exists.
   */
  where: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
  /**
   * In case the IncidentTypeSeverityCondition found by the `where` argument doesn't exist, create a new IncidentTypeSeverityCondition with this data.
   */
  create: Prisma.XOR<Prisma.IncidentTypeSeverityConditionCreateInput, Prisma.IncidentTypeSeverityConditionUncheckedCreateInput>
  /**
   * In case the IncidentTypeSeverityCondition was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IncidentTypeSeverityConditionUpdateInput, Prisma.IncidentTypeSeverityConditionUncheckedUpdateInput>
}

/**
 * IncidentTypeSeverityCondition delete
 */
export type IncidentTypeSeverityConditionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionInclude<ExtArgs> | null
  /**
   * Filter which IncidentTypeSeverityCondition to delete.
   */
  where: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
}

/**
 * IncidentTypeSeverityCondition deleteMany
 */
export type IncidentTypeSeverityConditionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IncidentTypeSeverityConditions to delete
   */
  where?: Prisma.IncidentTypeSeverityConditionWhereInput
  /**
   * Limit how many IncidentTypeSeverityConditions to delete.
   */
  limit?: number
}

/**
 * IncidentTypeSeverityCondition without action
 */
export type IncidentTypeSeverityConditionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionInclude<ExtArgs> | null
}
