
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `IncidentType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model IncidentType
 * 
 */
export type IncidentTypeModel = runtime.Types.Result.DefaultSelection<Prisma.$IncidentTypePayload>

export type AggregateIncidentType = {
  _count: IncidentTypeCountAggregateOutputType | null
  _avg: IncidentTypeAvgAggregateOutputType | null
  _sum: IncidentTypeSumAggregateOutputType | null
  _min: IncidentTypeMinAggregateOutputType | null
  _max: IncidentTypeMaxAggregateOutputType | null
}

export type IncidentTypeAvgAggregateOutputType = {
  id: number | null
  priority: number | null
}

export type IncidentTypeSumAggregateOutputType = {
  id: number | null
  priority: number | null
}

export type IncidentTypeMinAggregateOutputType = {
  id: number | null
  name: string | null
  serviceId: string | null
  title: string | null
  description: string | null
  condition: string | null
  groupCondition: string | null
  priority: number | null
  createdAt: Date | null
  updatedAt: Date | null
  createdById: string | null
  updatedById: string | null
}

export type IncidentTypeMaxAggregateOutputType = {
  id: number | null
  name: string | null
  serviceId: string | null
  title: string | null
  description: string | null
  condition: string | null
  groupCondition: string | null
  priority: number | null
  createdAt: Date | null
  updatedAt: Date | null
  createdById: string | null
  updatedById: string | null
}

export type IncidentTypeCountAggregateOutputType = {
  id: number
  name: number
  serviceId: number
  title: number
  description: number
  condition: number
  groupCondition: number
  priority: number
  createdAt: number
  updatedAt: number
  createdById: number
  updatedById: number
  _all: number
}


export type IncidentTypeAvgAggregateInputType = {
  id?: true
  priority?: true
}

export type IncidentTypeSumAggregateInputType = {
  id?: true
  priority?: true
}

export type IncidentTypeMinAggregateInputType = {
  id?: true
  name?: true
  serviceId?: true
  title?: true
  description?: true
  condition?: true
  groupCondition?: true
  priority?: true
  createdAt?: true
  updatedAt?: true
  createdById?: true
  updatedById?: true
}

export type IncidentTypeMaxAggregateInputType = {
  id?: true
  name?: true
  serviceId?: true
  title?: true
  description?: true
  condition?: true
  groupCondition?: true
  priority?: true
  createdAt?: true
  updatedAt?: true
  createdById?: true
  updatedById?: true
}

export type IncidentTypeCountAggregateInputType = {
  id?: true
  name?: true
  serviceId?: true
  title?: true
  description?: true
  condition?: true
  groupCondition?: true
  priority?: true
  createdAt?: true
  updatedAt?: true
  createdById?: true
  updatedById?: true
  _all?: true
}

export type IncidentTypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IncidentType to aggregate.
   */
  where?: Prisma.IncidentTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncidentTypes to fetch.
   */
  orderBy?: Prisma.IncidentTypeOrderByWithRelationInput | Prisma.IncidentTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IncidentTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncidentTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncidentTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned IncidentTypes
  **/
  _count?: true | IncidentTypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IncidentTypeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IncidentTypeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IncidentTypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IncidentTypeMaxAggregateInputType
}

export type GetIncidentTypeAggregateType<T extends IncidentTypeAggregateArgs> = {
      [P in keyof T & keyof AggregateIncidentType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIncidentType[P]>
    : Prisma.GetScalarType<T[P], AggregateIncidentType[P]>
}




export type IncidentTypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IncidentTypeWhereInput
  orderBy?: Prisma.IncidentTypeOrderByWithAggregationInput | Prisma.IncidentTypeOrderByWithAggregationInput[]
  by: Prisma.IncidentTypeScalarFieldEnum[] | Prisma.IncidentTypeScalarFieldEnum
  having?: Prisma.IncidentTypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IncidentTypeCountAggregateInputType | true
  _avg?: IncidentTypeAvgAggregateInputType
  _sum?: IncidentTypeSumAggregateInputType
  _min?: IncidentTypeMinAggregateInputType
  _max?: IncidentTypeMaxAggregateInputType
}

export type IncidentTypeGroupByOutputType = {
  id: number
  name: string
  serviceId: string
  title: string
  description: string
  condition: string
  groupCondition: string | null
  priority: number
  createdAt: Date
  updatedAt: Date
  createdById: string
  updatedById: string
  _count: IncidentTypeCountAggregateOutputType | null
  _avg: IncidentTypeAvgAggregateOutputType | null
  _sum: IncidentTypeSumAggregateOutputType | null
  _min: IncidentTypeMinAggregateOutputType | null
  _max: IncidentTypeMaxAggregateOutputType | null
}

type GetIncidentTypeGroupByPayload<T extends IncidentTypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IncidentTypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IncidentTypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IncidentTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IncidentTypeGroupByOutputType[P]>
      }
    >
  >



export type IncidentTypeWhereInput = {
  AND?: Prisma.IncidentTypeWhereInput | Prisma.IncidentTypeWhereInput[]
  OR?: Prisma.IncidentTypeWhereInput[]
  NOT?: Prisma.IncidentTypeWhereInput | Prisma.IncidentTypeWhereInput[]
  id?: Prisma.IntFilter<"IncidentType"> | number
  name?: Prisma.StringFilter<"IncidentType"> | string
  serviceId?: Prisma.StringFilter<"IncidentType"> | string
  title?: Prisma.StringFilter<"IncidentType"> | string
  description?: Prisma.StringFilter<"IncidentType"> | string
  condition?: Prisma.StringFilter<"IncidentType"> | string
  groupCondition?: Prisma.StringNullableFilter<"IncidentType"> | string | null
  priority?: Prisma.IntFilter<"IncidentType"> | number
  createdAt?: Prisma.DateTimeFilter<"IncidentType"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"IncidentType"> | Date | string
  createdById?: Prisma.StringFilter<"IncidentType"> | string
  updatedById?: Prisma.StringFilter<"IncidentType"> | string
  service?: Prisma.XOR<Prisma.ServiceScalarRelationFilter, Prisma.ServiceWhereInput>
  severityConditions?: Prisma.IncidentTypeSeverityConditionListRelationFilter
  incidents?: Prisma.IncidentListRelationFilter
  createdBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  updatedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type IncidentTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  groupCondition?: Prisma.SortOrderInput | Prisma.SortOrder
  priority?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
  service?: Prisma.ServiceOrderByWithRelationInput
  severityConditions?: Prisma.IncidentTypeSeverityConditionOrderByRelationAggregateInput
  incidents?: Prisma.IncidentOrderByRelationAggregateInput
  createdBy?: Prisma.UserOrderByWithRelationInput
  updatedBy?: Prisma.UserOrderByWithRelationInput
}

export type IncidentTypeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.IncidentTypeWhereInput | Prisma.IncidentTypeWhereInput[]
  OR?: Prisma.IncidentTypeWhereInput[]
  NOT?: Prisma.IncidentTypeWhereInput | Prisma.IncidentTypeWhereInput[]
  name?: Prisma.StringFilter<"IncidentType"> | string
  serviceId?: Prisma.StringFilter<"IncidentType"> | string
  title?: Prisma.StringFilter<"IncidentType"> | string
  description?: Prisma.StringFilter<"IncidentType"> | string
  condition?: Prisma.StringFilter<"IncidentType"> | string
  groupCondition?: Prisma.StringNullableFilter<"IncidentType"> | string | null
  priority?: Prisma.IntFilter<"IncidentType"> | number
  createdAt?: Prisma.DateTimeFilter<"IncidentType"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"IncidentType"> | Date | string
  createdById?: Prisma.StringFilter<"IncidentType"> | string
  updatedById?: Prisma.StringFilter<"IncidentType"> | string
  service?: Prisma.XOR<Prisma.ServiceScalarRelationFilter, Prisma.ServiceWhereInput>
  severityConditions?: Prisma.IncidentTypeSeverityConditionListRelationFilter
  incidents?: Prisma.IncidentListRelationFilter
  createdBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  updatedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type IncidentTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  groupCondition?: Prisma.SortOrderInput | Prisma.SortOrder
  priority?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
  _count?: Prisma.IncidentTypeCountOrderByAggregateInput
  _avg?: Prisma.IncidentTypeAvgOrderByAggregateInput
  _max?: Prisma.IncidentTypeMaxOrderByAggregateInput
  _min?: Prisma.IncidentTypeMinOrderByAggregateInput
  _sum?: Prisma.IncidentTypeSumOrderByAggregateInput
}

export type IncidentTypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.IncidentTypeScalarWhereWithAggregatesInput | Prisma.IncidentTypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.IncidentTypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IncidentTypeScalarWhereWithAggregatesInput | Prisma.IncidentTypeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"IncidentType"> | number
  name?: Prisma.StringWithAggregatesFilter<"IncidentType"> | string
  serviceId?: Prisma.StringWithAggregatesFilter<"IncidentType"> | string
  title?: Prisma.StringWithAggregatesFilter<"IncidentType"> | string
  description?: Prisma.StringWithAggregatesFilter<"IncidentType"> | string
  condition?: Prisma.StringWithAggregatesFilter<"IncidentType"> | string
  groupCondition?: Prisma.StringNullableWithAggregatesFilter<"IncidentType"> | string | null
  priority?: Prisma.IntWithAggregatesFilter<"IncidentType"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"IncidentType"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"IncidentType"> | Date | string
  createdById?: Prisma.StringWithAggregatesFilter<"IncidentType"> | string
  updatedById?: Prisma.StringWithAggregatesFilter<"IncidentType"> | string
}

export type IncidentTypeCreateInput = {
  name: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutIncidentTypesInput
  severityConditions?: Prisma.IncidentTypeSeverityConditionCreateNestedManyWithoutIncidentTypeInput
  incidents?: Prisma.IncidentCreateNestedManyWithoutTypeInput
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedIncidentTypesInput
  updatedBy: Prisma.UserCreateNestedOneWithoutUpdatedIncidentTypesInput
}

export type IncidentTypeUncheckedCreateInput = {
  id?: number
  name: string
  serviceId: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
  severityConditions?: Prisma.IncidentTypeSeverityConditionUncheckedCreateNestedManyWithoutIncidentTypeInput
  incidents?: Prisma.IncidentUncheckedCreateNestedManyWithoutTypeInput
}

export type IncidentTypeUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutIncidentTypesNestedInput
  severityConditions?: Prisma.IncidentTypeSeverityConditionUpdateManyWithoutIncidentTypeNestedInput
  incidents?: Prisma.IncidentUpdateManyWithoutTypeNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedIncidentTypesNestedInput
  updatedBy?: Prisma.UserUpdateOneRequiredWithoutUpdatedIncidentTypesNestedInput
}

export type IncidentTypeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
  severityConditions?: Prisma.IncidentTypeSeverityConditionUncheckedUpdateManyWithoutIncidentTypeNestedInput
  incidents?: Prisma.IncidentUncheckedUpdateManyWithoutTypeNestedInput
}

export type IncidentTypeCreateManyInput = {
  id?: number
  name: string
  serviceId: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
}

export type IncidentTypeUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncidentTypeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IncidentTypeListRelationFilter = {
  every?: Prisma.IncidentTypeWhereInput
  some?: Prisma.IncidentTypeWhereInput
  none?: Prisma.IncidentTypeWhereInput
}

export type IncidentTypeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IncidentTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  groupCondition?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
}

export type IncidentTypeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  priority?: Prisma.SortOrder
}

export type IncidentTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  groupCondition?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
}

export type IncidentTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  groupCondition?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
}

export type IncidentTypeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  priority?: Prisma.SortOrder
}

export type IncidentTypeScalarRelationFilter = {
  is?: Prisma.IncidentTypeWhereInput
  isNot?: Prisma.IncidentTypeWhereInput
}

export type IncidentTypeNullableScalarRelationFilter = {
  is?: Prisma.IncidentTypeWhereInput | null
  isNot?: Prisma.IncidentTypeWhereInput | null
}

export type IncidentTypeCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutServiceInput, Prisma.IncidentTypeUncheckedCreateWithoutServiceInput> | Prisma.IncidentTypeCreateWithoutServiceInput[] | Prisma.IncidentTypeUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutServiceInput | Prisma.IncidentTypeCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.IncidentTypeCreateManyServiceInputEnvelope
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
}

export type IncidentTypeUncheckedCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutServiceInput, Prisma.IncidentTypeUncheckedCreateWithoutServiceInput> | Prisma.IncidentTypeCreateWithoutServiceInput[] | Prisma.IncidentTypeUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutServiceInput | Prisma.IncidentTypeCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.IncidentTypeCreateManyServiceInputEnvelope
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
}

export type IncidentTypeUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutServiceInput, Prisma.IncidentTypeUncheckedCreateWithoutServiceInput> | Prisma.IncidentTypeCreateWithoutServiceInput[] | Prisma.IncidentTypeUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutServiceInput | Prisma.IncidentTypeCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.IncidentTypeUpsertWithWhereUniqueWithoutServiceInput | Prisma.IncidentTypeUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.IncidentTypeCreateManyServiceInputEnvelope
  set?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  disconnect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  delete?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  update?: Prisma.IncidentTypeUpdateWithWhereUniqueWithoutServiceInput | Prisma.IncidentTypeUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.IncidentTypeUpdateManyWithWhereWithoutServiceInput | Prisma.IncidentTypeUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.IncidentTypeScalarWhereInput | Prisma.IncidentTypeScalarWhereInput[]
}

export type IncidentTypeUncheckedUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutServiceInput, Prisma.IncidentTypeUncheckedCreateWithoutServiceInput> | Prisma.IncidentTypeCreateWithoutServiceInput[] | Prisma.IncidentTypeUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutServiceInput | Prisma.IncidentTypeCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.IncidentTypeUpsertWithWhereUniqueWithoutServiceInput | Prisma.IncidentTypeUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.IncidentTypeCreateManyServiceInputEnvelope
  set?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  disconnect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  delete?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  update?: Prisma.IncidentTypeUpdateWithWhereUniqueWithoutServiceInput | Prisma.IncidentTypeUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.IncidentTypeUpdateManyWithWhereWithoutServiceInput | Prisma.IncidentTypeUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.IncidentTypeScalarWhereInput | Prisma.IncidentTypeScalarWhereInput[]
}

export type IncidentTypeCreateNestedOneWithoutSeverityConditionsInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutSeverityConditionsInput, Prisma.IncidentTypeUncheckedCreateWithoutSeverityConditionsInput>
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutSeverityConditionsInput
  connect?: Prisma.IncidentTypeWhereUniqueInput
}

export type IncidentTypeUpdateOneRequiredWithoutSeverityConditionsNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutSeverityConditionsInput, Prisma.IncidentTypeUncheckedCreateWithoutSeverityConditionsInput>
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutSeverityConditionsInput
  upsert?: Prisma.IncidentTypeUpsertWithoutSeverityConditionsInput
  connect?: Prisma.IncidentTypeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.IncidentTypeUpdateToOneWithWhereWithoutSeverityConditionsInput, Prisma.IncidentTypeUpdateWithoutSeverityConditionsInput>, Prisma.IncidentTypeUncheckedUpdateWithoutSeverityConditionsInput>
}

export type IncidentTypeCreateNestedOneWithoutIncidentsInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutIncidentsInput, Prisma.IncidentTypeUncheckedCreateWithoutIncidentsInput>
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutIncidentsInput
  connect?: Prisma.IncidentTypeWhereUniqueInput
}

export type IncidentTypeUpdateOneWithoutIncidentsNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutIncidentsInput, Prisma.IncidentTypeUncheckedCreateWithoutIncidentsInput>
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutIncidentsInput
  upsert?: Prisma.IncidentTypeUpsertWithoutIncidentsInput
  disconnect?: Prisma.IncidentTypeWhereInput | boolean
  delete?: Prisma.IncidentTypeWhereInput | boolean
  connect?: Prisma.IncidentTypeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.IncidentTypeUpdateToOneWithWhereWithoutIncidentsInput, Prisma.IncidentTypeUpdateWithoutIncidentsInput>, Prisma.IncidentTypeUncheckedUpdateWithoutIncidentsInput>
}

export type IncidentTypeCreateNestedManyWithoutCreatedByInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutCreatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutCreatedByInput> | Prisma.IncidentTypeCreateWithoutCreatedByInput[] | Prisma.IncidentTypeUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutCreatedByInput | Prisma.IncidentTypeCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.IncidentTypeCreateManyCreatedByInputEnvelope
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
}

export type IncidentTypeCreateNestedManyWithoutUpdatedByInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutUpdatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutUpdatedByInput> | Prisma.IncidentTypeCreateWithoutUpdatedByInput[] | Prisma.IncidentTypeUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutUpdatedByInput | Prisma.IncidentTypeCreateOrConnectWithoutUpdatedByInput[]
  createMany?: Prisma.IncidentTypeCreateManyUpdatedByInputEnvelope
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
}

export type IncidentTypeUncheckedCreateNestedManyWithoutCreatedByInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutCreatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutCreatedByInput> | Prisma.IncidentTypeCreateWithoutCreatedByInput[] | Prisma.IncidentTypeUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutCreatedByInput | Prisma.IncidentTypeCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.IncidentTypeCreateManyCreatedByInputEnvelope
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
}

export type IncidentTypeUncheckedCreateNestedManyWithoutUpdatedByInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutUpdatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutUpdatedByInput> | Prisma.IncidentTypeCreateWithoutUpdatedByInput[] | Prisma.IncidentTypeUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutUpdatedByInput | Prisma.IncidentTypeCreateOrConnectWithoutUpdatedByInput[]
  createMany?: Prisma.IncidentTypeCreateManyUpdatedByInputEnvelope
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
}

export type IncidentTypeUpdateManyWithoutCreatedByNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutCreatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutCreatedByInput> | Prisma.IncidentTypeCreateWithoutCreatedByInput[] | Prisma.IncidentTypeUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutCreatedByInput | Prisma.IncidentTypeCreateOrConnectWithoutCreatedByInput[]
  upsert?: Prisma.IncidentTypeUpsertWithWhereUniqueWithoutCreatedByInput | Prisma.IncidentTypeUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.IncidentTypeCreateManyCreatedByInputEnvelope
  set?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  disconnect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  delete?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  update?: Prisma.IncidentTypeUpdateWithWhereUniqueWithoutCreatedByInput | Prisma.IncidentTypeUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?: Prisma.IncidentTypeUpdateManyWithWhereWithoutCreatedByInput | Prisma.IncidentTypeUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.IncidentTypeScalarWhereInput | Prisma.IncidentTypeScalarWhereInput[]
}

export type IncidentTypeUpdateManyWithoutUpdatedByNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutUpdatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutUpdatedByInput> | Prisma.IncidentTypeCreateWithoutUpdatedByInput[] | Prisma.IncidentTypeUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutUpdatedByInput | Prisma.IncidentTypeCreateOrConnectWithoutUpdatedByInput[]
  upsert?: Prisma.IncidentTypeUpsertWithWhereUniqueWithoutUpdatedByInput | Prisma.IncidentTypeUpsertWithWhereUniqueWithoutUpdatedByInput[]
  createMany?: Prisma.IncidentTypeCreateManyUpdatedByInputEnvelope
  set?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  disconnect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  delete?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  update?: Prisma.IncidentTypeUpdateWithWhereUniqueWithoutUpdatedByInput | Prisma.IncidentTypeUpdateWithWhereUniqueWithoutUpdatedByInput[]
  updateMany?: Prisma.IncidentTypeUpdateManyWithWhereWithoutUpdatedByInput | Prisma.IncidentTypeUpdateManyWithWhereWithoutUpdatedByInput[]
  deleteMany?: Prisma.IncidentTypeScalarWhereInput | Prisma.IncidentTypeScalarWhereInput[]
}

export type IncidentTypeUncheckedUpdateManyWithoutCreatedByNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutCreatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutCreatedByInput> | Prisma.IncidentTypeCreateWithoutCreatedByInput[] | Prisma.IncidentTypeUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutCreatedByInput | Prisma.IncidentTypeCreateOrConnectWithoutCreatedByInput[]
  upsert?: Prisma.IncidentTypeUpsertWithWhereUniqueWithoutCreatedByInput | Prisma.IncidentTypeUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.IncidentTypeCreateManyCreatedByInputEnvelope
  set?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  disconnect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  delete?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  update?: Prisma.IncidentTypeUpdateWithWhereUniqueWithoutCreatedByInput | Prisma.IncidentTypeUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?: Prisma.IncidentTypeUpdateManyWithWhereWithoutCreatedByInput | Prisma.IncidentTypeUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.IncidentTypeScalarWhereInput | Prisma.IncidentTypeScalarWhereInput[]
}

export type IncidentTypeUncheckedUpdateManyWithoutUpdatedByNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentTypeCreateWithoutUpdatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutUpdatedByInput> | Prisma.IncidentTypeCreateWithoutUpdatedByInput[] | Prisma.IncidentTypeUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.IncidentTypeCreateOrConnectWithoutUpdatedByInput | Prisma.IncidentTypeCreateOrConnectWithoutUpdatedByInput[]
  upsert?: Prisma.IncidentTypeUpsertWithWhereUniqueWithoutUpdatedByInput | Prisma.IncidentTypeUpsertWithWhereUniqueWithoutUpdatedByInput[]
  createMany?: Prisma.IncidentTypeCreateManyUpdatedByInputEnvelope
  set?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  disconnect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  delete?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  connect?: Prisma.IncidentTypeWhereUniqueInput | Prisma.IncidentTypeWhereUniqueInput[]
  update?: Prisma.IncidentTypeUpdateWithWhereUniqueWithoutUpdatedByInput | Prisma.IncidentTypeUpdateWithWhereUniqueWithoutUpdatedByInput[]
  updateMany?: Prisma.IncidentTypeUpdateManyWithWhereWithoutUpdatedByInput | Prisma.IncidentTypeUpdateManyWithWhereWithoutUpdatedByInput[]
  deleteMany?: Prisma.IncidentTypeScalarWhereInput | Prisma.IncidentTypeScalarWhereInput[]
}

export type IncidentTypeCreateWithoutServiceInput = {
  name: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  severityConditions?: Prisma.IncidentTypeSeverityConditionCreateNestedManyWithoutIncidentTypeInput
  incidents?: Prisma.IncidentCreateNestedManyWithoutTypeInput
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedIncidentTypesInput
  updatedBy: Prisma.UserCreateNestedOneWithoutUpdatedIncidentTypesInput
}

export type IncidentTypeUncheckedCreateWithoutServiceInput = {
  id?: number
  name: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
  severityConditions?: Prisma.IncidentTypeSeverityConditionUncheckedCreateNestedManyWithoutIncidentTypeInput
  incidents?: Prisma.IncidentUncheckedCreateNestedManyWithoutTypeInput
}

export type IncidentTypeCreateOrConnectWithoutServiceInput = {
  where: Prisma.IncidentTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.IncidentTypeCreateWithoutServiceInput, Prisma.IncidentTypeUncheckedCreateWithoutServiceInput>
}

export type IncidentTypeCreateManyServiceInputEnvelope = {
  data: Prisma.IncidentTypeCreateManyServiceInput | Prisma.IncidentTypeCreateManyServiceInput[]
  skipDuplicates?: boolean
}

export type IncidentTypeUpsertWithWhereUniqueWithoutServiceInput = {
  where: Prisma.IncidentTypeWhereUniqueInput
  update: Prisma.XOR<Prisma.IncidentTypeUpdateWithoutServiceInput, Prisma.IncidentTypeUncheckedUpdateWithoutServiceInput>
  create: Prisma.XOR<Prisma.IncidentTypeCreateWithoutServiceInput, Prisma.IncidentTypeUncheckedCreateWithoutServiceInput>
}

export type IncidentTypeUpdateWithWhereUniqueWithoutServiceInput = {
  where: Prisma.IncidentTypeWhereUniqueInput
  data: Prisma.XOR<Prisma.IncidentTypeUpdateWithoutServiceInput, Prisma.IncidentTypeUncheckedUpdateWithoutServiceInput>
}

export type IncidentTypeUpdateManyWithWhereWithoutServiceInput = {
  where: Prisma.IncidentTypeScalarWhereInput
  data: Prisma.XOR<Prisma.IncidentTypeUpdateManyMutationInput, Prisma.IncidentTypeUncheckedUpdateManyWithoutServiceInput>
}

export type IncidentTypeScalarWhereInput = {
  AND?: Prisma.IncidentTypeScalarWhereInput | Prisma.IncidentTypeScalarWhereInput[]
  OR?: Prisma.IncidentTypeScalarWhereInput[]
  NOT?: Prisma.IncidentTypeScalarWhereInput | Prisma.IncidentTypeScalarWhereInput[]
  id?: Prisma.IntFilter<"IncidentType"> | number
  name?: Prisma.StringFilter<"IncidentType"> | string
  serviceId?: Prisma.StringFilter<"IncidentType"> | string
  title?: Prisma.StringFilter<"IncidentType"> | string
  description?: Prisma.StringFilter<"IncidentType"> | string
  condition?: Prisma.StringFilter<"IncidentType"> | string
  groupCondition?: Prisma.StringNullableFilter<"IncidentType"> | string | null
  priority?: Prisma.IntFilter<"IncidentType"> | number
  createdAt?: Prisma.DateTimeFilter<"IncidentType"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"IncidentType"> | Date | string
  createdById?: Prisma.StringFilter<"IncidentType"> | string
  updatedById?: Prisma.StringFilter<"IncidentType"> | string
}

export type IncidentTypeCreateWithoutSeverityConditionsInput = {
  name: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutIncidentTypesInput
  incidents?: Prisma.IncidentCreateNestedManyWithoutTypeInput
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedIncidentTypesInput
  updatedBy: Prisma.UserCreateNestedOneWithoutUpdatedIncidentTypesInput
}

export type IncidentTypeUncheckedCreateWithoutSeverityConditionsInput = {
  id?: number
  name: string
  serviceId: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
  incidents?: Prisma.IncidentUncheckedCreateNestedManyWithoutTypeInput
}

export type IncidentTypeCreateOrConnectWithoutSeverityConditionsInput = {
  where: Prisma.IncidentTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.IncidentTypeCreateWithoutSeverityConditionsInput, Prisma.IncidentTypeUncheckedCreateWithoutSeverityConditionsInput>
}

export type IncidentTypeUpsertWithoutSeverityConditionsInput = {
  update: Prisma.XOR<Prisma.IncidentTypeUpdateWithoutSeverityConditionsInput, Prisma.IncidentTypeUncheckedUpdateWithoutSeverityConditionsInput>
  create: Prisma.XOR<Prisma.IncidentTypeCreateWithoutSeverityConditionsInput, Prisma.IncidentTypeUncheckedCreateWithoutSeverityConditionsInput>
  where?: Prisma.IncidentTypeWhereInput
}

export type IncidentTypeUpdateToOneWithWhereWithoutSeverityConditionsInput = {
  where?: Prisma.IncidentTypeWhereInput
  data: Prisma.XOR<Prisma.IncidentTypeUpdateWithoutSeverityConditionsInput, Prisma.IncidentTypeUncheckedUpdateWithoutSeverityConditionsInput>
}

export type IncidentTypeUpdateWithoutSeverityConditionsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutIncidentTypesNestedInput
  incidents?: Prisma.IncidentUpdateManyWithoutTypeNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedIncidentTypesNestedInput
  updatedBy?: Prisma.UserUpdateOneRequiredWithoutUpdatedIncidentTypesNestedInput
}

export type IncidentTypeUncheckedUpdateWithoutSeverityConditionsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
  incidents?: Prisma.IncidentUncheckedUpdateManyWithoutTypeNestedInput
}

export type IncidentTypeCreateWithoutIncidentsInput = {
  name: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutIncidentTypesInput
  severityConditions?: Prisma.IncidentTypeSeverityConditionCreateNestedManyWithoutIncidentTypeInput
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedIncidentTypesInput
  updatedBy: Prisma.UserCreateNestedOneWithoutUpdatedIncidentTypesInput
}

export type IncidentTypeUncheckedCreateWithoutIncidentsInput = {
  id?: number
  name: string
  serviceId: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
  severityConditions?: Prisma.IncidentTypeSeverityConditionUncheckedCreateNestedManyWithoutIncidentTypeInput
}

export type IncidentTypeCreateOrConnectWithoutIncidentsInput = {
  where: Prisma.IncidentTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.IncidentTypeCreateWithoutIncidentsInput, Prisma.IncidentTypeUncheckedCreateWithoutIncidentsInput>
}

export type IncidentTypeUpsertWithoutIncidentsInput = {
  update: Prisma.XOR<Prisma.IncidentTypeUpdateWithoutIncidentsInput, Prisma.IncidentTypeUncheckedUpdateWithoutIncidentsInput>
  create: Prisma.XOR<Prisma.IncidentTypeCreateWithoutIncidentsInput, Prisma.IncidentTypeUncheckedCreateWithoutIncidentsInput>
  where?: Prisma.IncidentTypeWhereInput
}

export type IncidentTypeUpdateToOneWithWhereWithoutIncidentsInput = {
  where?: Prisma.IncidentTypeWhereInput
  data: Prisma.XOR<Prisma.IncidentTypeUpdateWithoutIncidentsInput, Prisma.IncidentTypeUncheckedUpdateWithoutIncidentsInput>
}

export type IncidentTypeUpdateWithoutIncidentsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutIncidentTypesNestedInput
  severityConditions?: Prisma.IncidentTypeSeverityConditionUpdateManyWithoutIncidentTypeNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedIncidentTypesNestedInput
  updatedBy?: Prisma.UserUpdateOneRequiredWithoutUpdatedIncidentTypesNestedInput
}

export type IncidentTypeUncheckedUpdateWithoutIncidentsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
  severityConditions?: Prisma.IncidentTypeSeverityConditionUncheckedUpdateManyWithoutIncidentTypeNestedInput
}

export type IncidentTypeCreateWithoutCreatedByInput = {
  name: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutIncidentTypesInput
  severityConditions?: Prisma.IncidentTypeSeverityConditionCreateNestedManyWithoutIncidentTypeInput
  incidents?: Prisma.IncidentCreateNestedManyWithoutTypeInput
  updatedBy: Prisma.UserCreateNestedOneWithoutUpdatedIncidentTypesInput
}

export type IncidentTypeUncheckedCreateWithoutCreatedByInput = {
  id?: number
  name: string
  serviceId: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  updatedById: string
  severityConditions?: Prisma.IncidentTypeSeverityConditionUncheckedCreateNestedManyWithoutIncidentTypeInput
  incidents?: Prisma.IncidentUncheckedCreateNestedManyWithoutTypeInput
}

export type IncidentTypeCreateOrConnectWithoutCreatedByInput = {
  where: Prisma.IncidentTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.IncidentTypeCreateWithoutCreatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutCreatedByInput>
}

export type IncidentTypeCreateManyCreatedByInputEnvelope = {
  data: Prisma.IncidentTypeCreateManyCreatedByInput | Prisma.IncidentTypeCreateManyCreatedByInput[]
  skipDuplicates?: boolean
}

export type IncidentTypeCreateWithoutUpdatedByInput = {
  name: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutIncidentTypesInput
  severityConditions?: Prisma.IncidentTypeSeverityConditionCreateNestedManyWithoutIncidentTypeInput
  incidents?: Prisma.IncidentCreateNestedManyWithoutTypeInput
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedIncidentTypesInput
}

export type IncidentTypeUncheckedCreateWithoutUpdatedByInput = {
  id?: number
  name: string
  serviceId: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  severityConditions?: Prisma.IncidentTypeSeverityConditionUncheckedCreateNestedManyWithoutIncidentTypeInput
  incidents?: Prisma.IncidentUncheckedCreateNestedManyWithoutTypeInput
}

export type IncidentTypeCreateOrConnectWithoutUpdatedByInput = {
  where: Prisma.IncidentTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.IncidentTypeCreateWithoutUpdatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutUpdatedByInput>
}

export type IncidentTypeCreateManyUpdatedByInputEnvelope = {
  data: Prisma.IncidentTypeCreateManyUpdatedByInput | Prisma.IncidentTypeCreateManyUpdatedByInput[]
  skipDuplicates?: boolean
}

export type IncidentTypeUpsertWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.IncidentTypeWhereUniqueInput
  update: Prisma.XOR<Prisma.IncidentTypeUpdateWithoutCreatedByInput, Prisma.IncidentTypeUncheckedUpdateWithoutCreatedByInput>
  create: Prisma.XOR<Prisma.IncidentTypeCreateWithoutCreatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutCreatedByInput>
}

export type IncidentTypeUpdateWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.IncidentTypeWhereUniqueInput
  data: Prisma.XOR<Prisma.IncidentTypeUpdateWithoutCreatedByInput, Prisma.IncidentTypeUncheckedUpdateWithoutCreatedByInput>
}

export type IncidentTypeUpdateManyWithWhereWithoutCreatedByInput = {
  where: Prisma.IncidentTypeScalarWhereInput
  data: Prisma.XOR<Prisma.IncidentTypeUpdateManyMutationInput, Prisma.IncidentTypeUncheckedUpdateManyWithoutCreatedByInput>
}

export type IncidentTypeUpsertWithWhereUniqueWithoutUpdatedByInput = {
  where: Prisma.IncidentTypeWhereUniqueInput
  update: Prisma.XOR<Prisma.IncidentTypeUpdateWithoutUpdatedByInput, Prisma.IncidentTypeUncheckedUpdateWithoutUpdatedByInput>
  create: Prisma.XOR<Prisma.IncidentTypeCreateWithoutUpdatedByInput, Prisma.IncidentTypeUncheckedCreateWithoutUpdatedByInput>
}

export type IncidentTypeUpdateWithWhereUniqueWithoutUpdatedByInput = {
  where: Prisma.IncidentTypeWhereUniqueInput
  data: Prisma.XOR<Prisma.IncidentTypeUpdateWithoutUpdatedByInput, Prisma.IncidentTypeUncheckedUpdateWithoutUpdatedByInput>
}

export type IncidentTypeUpdateManyWithWhereWithoutUpdatedByInput = {
  where: Prisma.IncidentTypeScalarWhereInput
  data: Prisma.XOR<Prisma.IncidentTypeUpdateManyMutationInput, Prisma.IncidentTypeUncheckedUpdateManyWithoutUpdatedByInput>
}

export type IncidentTypeCreateManyServiceInput = {
  id?: number
  name: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
}

export type IncidentTypeUpdateWithoutServiceInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  severityConditions?: Prisma.IncidentTypeSeverityConditionUpdateManyWithoutIncidentTypeNestedInput
  incidents?: Prisma.IncidentUpdateManyWithoutTypeNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedIncidentTypesNestedInput
  updatedBy?: Prisma.UserUpdateOneRequiredWithoutUpdatedIncidentTypesNestedInput
}

export type IncidentTypeUncheckedUpdateWithoutServiceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
  severityConditions?: Prisma.IncidentTypeSeverityConditionUncheckedUpdateManyWithoutIncidentTypeNestedInput
  incidents?: Prisma.IncidentUncheckedUpdateManyWithoutTypeNestedInput
}

export type IncidentTypeUncheckedUpdateManyWithoutServiceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IncidentTypeCreateManyCreatedByInput = {
  id?: number
  name: string
  serviceId: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  updatedById: string
}

export type IncidentTypeCreateManyUpdatedByInput = {
  id?: number
  name: string
  serviceId: string
  title: string
  description: string
  condition: string
  groupCondition?: string | null
  priority?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
}

export type IncidentTypeUpdateWithoutCreatedByInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutIncidentTypesNestedInput
  severityConditions?: Prisma.IncidentTypeSeverityConditionUpdateManyWithoutIncidentTypeNestedInput
  incidents?: Prisma.IncidentUpdateManyWithoutTypeNestedInput
  updatedBy?: Prisma.UserUpdateOneRequiredWithoutUpdatedIncidentTypesNestedInput
}

export type IncidentTypeUncheckedUpdateWithoutCreatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
  severityConditions?: Prisma.IncidentTypeSeverityConditionUncheckedUpdateManyWithoutIncidentTypeNestedInput
  incidents?: Prisma.IncidentUncheckedUpdateManyWithoutTypeNestedInput
}

export type IncidentTypeUncheckedUpdateManyWithoutCreatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IncidentTypeUpdateWithoutUpdatedByInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutIncidentTypesNestedInput
  severityConditions?: Prisma.IncidentTypeSeverityConditionUpdateManyWithoutIncidentTypeNestedInput
  incidents?: Prisma.IncidentUpdateManyWithoutTypeNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedIncidentTypesNestedInput
}

export type IncidentTypeUncheckedUpdateWithoutUpdatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  severityConditions?: Prisma.IncidentTypeSeverityConditionUncheckedUpdateManyWithoutIncidentTypeNestedInput
  incidents?: Prisma.IncidentUncheckedUpdateManyWithoutTypeNestedInput
}

export type IncidentTypeUncheckedUpdateManyWithoutUpdatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  groupCondition?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type IncidentTypeCountOutputType
 */

export type IncidentTypeCountOutputType = {
  severityConditions: number
  incidents: number
}

export type IncidentTypeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  severityConditions?: boolean | IncidentTypeCountOutputTypeCountSeverityConditionsArgs
  incidents?: boolean | IncidentTypeCountOutputTypeCountIncidentsArgs
}

/**
 * IncidentTypeCountOutputType without action
 */
export type IncidentTypeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeCountOutputType
   */
  select?: Prisma.IncidentTypeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * IncidentTypeCountOutputType without action
 */
export type IncidentTypeCountOutputTypeCountSeverityConditionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IncidentTypeSeverityConditionWhereInput
}

/**
 * IncidentTypeCountOutputType without action
 */
export type IncidentTypeCountOutputTypeCountIncidentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IncidentWhereInput
}


export type IncidentTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  serviceId?: boolean
  title?: boolean
  description?: boolean
  condition?: boolean
  groupCondition?: boolean
  priority?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  severityConditions?: boolean | Prisma.IncidentType$severityConditionsArgs<ExtArgs>
  incidents?: boolean | Prisma.IncidentType$incidentsArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.IncidentTypeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incidentType"]>

export type IncidentTypeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  serviceId?: boolean
  title?: boolean
  description?: boolean
  condition?: boolean
  groupCondition?: boolean
  priority?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incidentType"]>

export type IncidentTypeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  serviceId?: boolean
  title?: boolean
  description?: boolean
  condition?: boolean
  groupCondition?: boolean
  priority?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incidentType"]>

export type IncidentTypeSelectScalar = {
  id?: boolean
  name?: boolean
  serviceId?: boolean
  title?: boolean
  description?: boolean
  condition?: boolean
  groupCondition?: boolean
  priority?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
}

export type IncidentTypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "serviceId" | "title" | "description" | "condition" | "groupCondition" | "priority" | "createdAt" | "updatedAt" | "createdById" | "updatedById", ExtArgs["result"]["incidentType"]>
export type IncidentTypeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  severityConditions?: boolean | Prisma.IncidentType$severityConditionsArgs<ExtArgs>
  incidents?: boolean | Prisma.IncidentType$incidentsArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.IncidentTypeCountOutputTypeDefaultArgs<ExtArgs>
}
export type IncidentTypeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type IncidentTypeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $IncidentTypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "IncidentType"
  objects: {
    service: Prisma.$ServicePayload<ExtArgs>
    severityConditions: Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>[]
    incidents: Prisma.$IncidentPayload<ExtArgs>[]
    createdBy: Prisma.$UserPayload<ExtArgs>
    updatedBy: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    serviceId: string
    title: string
    description: string
    condition: string
    groupCondition: string | null
    priority: number
    createdAt: Date
    updatedAt: Date
    createdById: string
    updatedById: string
  }, ExtArgs["result"]["incidentType"]>
  composites: {}
}

export type IncidentTypeGetPayload<S extends boolean | null | undefined | IncidentTypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload, S>

export type IncidentTypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IncidentTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IncidentTypeCountAggregateInputType | true
  }

export interface IncidentTypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IncidentType'], meta: { name: 'IncidentType' } }
  /**
   * Find zero or one IncidentType that matches the filter.
   * @param {IncidentTypeFindUniqueArgs} args - Arguments to find a IncidentType
   * @example
   * // Get one IncidentType
   * const incidentType = await prisma.incidentType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IncidentTypeFindUniqueArgs>(args: Prisma.SelectSubset<T, IncidentTypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one IncidentType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IncidentTypeFindUniqueOrThrowArgs} args - Arguments to find a IncidentType
   * @example
   * // Get one IncidentType
   * const incidentType = await prisma.incidentType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IncidentTypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IncidentTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IncidentType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeFindFirstArgs} args - Arguments to find a IncidentType
   * @example
   * // Get one IncidentType
   * const incidentType = await prisma.incidentType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IncidentTypeFindFirstArgs>(args?: Prisma.SelectSubset<T, IncidentTypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IncidentType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeFindFirstOrThrowArgs} args - Arguments to find a IncidentType
   * @example
   * // Get one IncidentType
   * const incidentType = await prisma.incidentType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IncidentTypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IncidentTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more IncidentTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all IncidentTypes
   * const incidentTypes = await prisma.incidentType.findMany()
   * 
   * // Get first 10 IncidentTypes
   * const incidentTypes = await prisma.incidentType.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const incidentTypeWithIdOnly = await prisma.incidentType.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IncidentTypeFindManyArgs>(args?: Prisma.SelectSubset<T, IncidentTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a IncidentType.
   * @param {IncidentTypeCreateArgs} args - Arguments to create a IncidentType.
   * @example
   * // Create one IncidentType
   * const IncidentType = await prisma.incidentType.create({
   *   data: {
   *     // ... data to create a IncidentType
   *   }
   * })
   * 
   */
  create<T extends IncidentTypeCreateArgs>(args: Prisma.SelectSubset<T, IncidentTypeCreateArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many IncidentTypes.
   * @param {IncidentTypeCreateManyArgs} args - Arguments to create many IncidentTypes.
   * @example
   * // Create many IncidentTypes
   * const incidentType = await prisma.incidentType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IncidentTypeCreateManyArgs>(args?: Prisma.SelectSubset<T, IncidentTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many IncidentTypes and returns the data saved in the database.
   * @param {IncidentTypeCreateManyAndReturnArgs} args - Arguments to create many IncidentTypes.
   * @example
   * // Create many IncidentTypes
   * const incidentType = await prisma.incidentType.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many IncidentTypes and only return the `id`
   * const incidentTypeWithIdOnly = await prisma.incidentType.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IncidentTypeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IncidentTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a IncidentType.
   * @param {IncidentTypeDeleteArgs} args - Arguments to delete one IncidentType.
   * @example
   * // Delete one IncidentType
   * const IncidentType = await prisma.incidentType.delete({
   *   where: {
   *     // ... filter to delete one IncidentType
   *   }
   * })
   * 
   */
  delete<T extends IncidentTypeDeleteArgs>(args: Prisma.SelectSubset<T, IncidentTypeDeleteArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one IncidentType.
   * @param {IncidentTypeUpdateArgs} args - Arguments to update one IncidentType.
   * @example
   * // Update one IncidentType
   * const incidentType = await prisma.incidentType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IncidentTypeUpdateArgs>(args: Prisma.SelectSubset<T, IncidentTypeUpdateArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more IncidentTypes.
   * @param {IncidentTypeDeleteManyArgs} args - Arguments to filter IncidentTypes to delete.
   * @example
   * // Delete a few IncidentTypes
   * const { count } = await prisma.incidentType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IncidentTypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, IncidentTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IncidentTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many IncidentTypes
   * const incidentType = await prisma.incidentType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IncidentTypeUpdateManyArgs>(args: Prisma.SelectSubset<T, IncidentTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IncidentTypes and returns the data updated in the database.
   * @param {IncidentTypeUpdateManyAndReturnArgs} args - Arguments to update many IncidentTypes.
   * @example
   * // Update many IncidentTypes
   * const incidentType = await prisma.incidentType.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more IncidentTypes and only return the `id`
   * const incidentTypeWithIdOnly = await prisma.incidentType.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IncidentTypeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IncidentTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one IncidentType.
   * @param {IncidentTypeUpsertArgs} args - Arguments to update or create a IncidentType.
   * @example
   * // Update or create a IncidentType
   * const incidentType = await prisma.incidentType.upsert({
   *   create: {
   *     // ... data to create a IncidentType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the IncidentType we want to update
   *   }
   * })
   */
  upsert<T extends IncidentTypeUpsertArgs>(args: Prisma.SelectSubset<T, IncidentTypeUpsertArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of IncidentTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeCountArgs} args - Arguments to filter IncidentTypes to count.
   * @example
   * // Count the number of IncidentTypes
   * const count = await prisma.incidentType.count({
   *   where: {
   *     // ... the filter for the IncidentTypes we want to count
   *   }
   * })
  **/
  count<T extends IncidentTypeCountArgs>(
    args?: Prisma.Subset<T, IncidentTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IncidentTypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a IncidentType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IncidentTypeAggregateArgs>(args: Prisma.Subset<T, IncidentTypeAggregateArgs>): Prisma.PrismaPromise<GetIncidentTypeAggregateType<T>>

  /**
   * Group by IncidentType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IncidentTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IncidentTypeGroupByArgs['orderBy'] }
      : { orderBy?: IncidentTypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IncidentTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncidentTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the IncidentType model
 */
readonly fields: IncidentTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for IncidentType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IncidentTypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  service<T extends Prisma.ServiceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ServiceDefaultArgs<ExtArgs>>): Prisma.Prisma__ServiceClient<runtime.Types.Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  severityConditions<T extends Prisma.IncidentType$severityConditionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IncidentType$severityConditionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncidentTypeSeverityConditionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  incidents<T extends Prisma.IncidentType$incidentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IncidentType$incidentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  createdBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  updatedBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the IncidentType model
 */
export interface IncidentTypeFieldRefs {
  readonly id: Prisma.FieldRef<"IncidentType", 'Int'>
  readonly name: Prisma.FieldRef<"IncidentType", 'String'>
  readonly serviceId: Prisma.FieldRef<"IncidentType", 'String'>
  readonly title: Prisma.FieldRef<"IncidentType", 'String'>
  readonly description: Prisma.FieldRef<"IncidentType", 'String'>
  readonly condition: Prisma.FieldRef<"IncidentType", 'String'>
  readonly groupCondition: Prisma.FieldRef<"IncidentType", 'String'>
  readonly priority: Prisma.FieldRef<"IncidentType", 'Int'>
  readonly createdAt: Prisma.FieldRef<"IncidentType", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"IncidentType", 'DateTime'>
  readonly createdById: Prisma.FieldRef<"IncidentType", 'String'>
  readonly updatedById: Prisma.FieldRef<"IncidentType", 'String'>
}
    

// Custom InputTypes
/**
 * IncidentType findUnique
 */
export type IncidentTypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeInclude<ExtArgs> | null
  /**
   * Filter, which IncidentType to fetch.
   */
  where: Prisma.IncidentTypeWhereUniqueInput
}

/**
 * IncidentType findUniqueOrThrow
 */
export type IncidentTypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeInclude<ExtArgs> | null
  /**
   * Filter, which IncidentType to fetch.
   */
  where: Prisma.IncidentTypeWhereUniqueInput
}

/**
 * IncidentType findFirst
 */
export type IncidentTypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeInclude<ExtArgs> | null
  /**
   * Filter, which IncidentType to fetch.
   */
  where?: Prisma.IncidentTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncidentTypes to fetch.
   */
  orderBy?: Prisma.IncidentTypeOrderByWithRelationInput | Prisma.IncidentTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IncidentTypes.
   */
  cursor?: Prisma.IncidentTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncidentTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncidentTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IncidentTypes.
   */
  distinct?: Prisma.IncidentTypeScalarFieldEnum | Prisma.IncidentTypeScalarFieldEnum[]
}

/**
 * IncidentType findFirstOrThrow
 */
export type IncidentTypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeInclude<ExtArgs> | null
  /**
   * Filter, which IncidentType to fetch.
   */
  where?: Prisma.IncidentTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncidentTypes to fetch.
   */
  orderBy?: Prisma.IncidentTypeOrderByWithRelationInput | Prisma.IncidentTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IncidentTypes.
   */
  cursor?: Prisma.IncidentTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncidentTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncidentTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IncidentTypes.
   */
  distinct?: Prisma.IncidentTypeScalarFieldEnum | Prisma.IncidentTypeScalarFieldEnum[]
}

/**
 * IncidentType findMany
 */
export type IncidentTypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeInclude<ExtArgs> | null
  /**
   * Filter, which IncidentTypes to fetch.
   */
  where?: Prisma.IncidentTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncidentTypes to fetch.
   */
  orderBy?: Prisma.IncidentTypeOrderByWithRelationInput | Prisma.IncidentTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing IncidentTypes.
   */
  cursor?: Prisma.IncidentTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncidentTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncidentTypes.
   */
  skip?: number
  distinct?: Prisma.IncidentTypeScalarFieldEnum | Prisma.IncidentTypeScalarFieldEnum[]
}

/**
 * IncidentType create
 */
export type IncidentTypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeInclude<ExtArgs> | null
  /**
   * The data needed to create a IncidentType.
   */
  data: Prisma.XOR<Prisma.IncidentTypeCreateInput, Prisma.IncidentTypeUncheckedCreateInput>
}

/**
 * IncidentType createMany
 */
export type IncidentTypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many IncidentTypes.
   */
  data: Prisma.IncidentTypeCreateManyInput | Prisma.IncidentTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IncidentType createManyAndReturn
 */
export type IncidentTypeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * The data used to create many IncidentTypes.
   */
  data: Prisma.IncidentTypeCreateManyInput | Prisma.IncidentTypeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * IncidentType update
 */
export type IncidentTypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeInclude<ExtArgs> | null
  /**
   * The data needed to update a IncidentType.
   */
  data: Prisma.XOR<Prisma.IncidentTypeUpdateInput, Prisma.IncidentTypeUncheckedUpdateInput>
  /**
   * Choose, which IncidentType to update.
   */
  where: Prisma.IncidentTypeWhereUniqueInput
}

/**
 * IncidentType updateMany
 */
export type IncidentTypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update IncidentTypes.
   */
  data: Prisma.XOR<Prisma.IncidentTypeUpdateManyMutationInput, Prisma.IncidentTypeUncheckedUpdateManyInput>
  /**
   * Filter which IncidentTypes to update
   */
  where?: Prisma.IncidentTypeWhereInput
  /**
   * Limit how many IncidentTypes to update.
   */
  limit?: number
}

/**
 * IncidentType updateManyAndReturn
 */
export type IncidentTypeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * The data used to update IncidentTypes.
   */
  data: Prisma.XOR<Prisma.IncidentTypeUpdateManyMutationInput, Prisma.IncidentTypeUncheckedUpdateManyInput>
  /**
   * Filter which IncidentTypes to update
   */
  where?: Prisma.IncidentTypeWhereInput
  /**
   * Limit how many IncidentTypes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * IncidentType upsert
 */
export type IncidentTypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeInclude<ExtArgs> | null
  /**
   * The filter to search for the IncidentType to update in case it exists.
   */
  where: Prisma.IncidentTypeWhereUniqueInput
  /**
   * In case the IncidentType found by the `where` argument doesn't exist, create a new IncidentType with this data.
   */
  create: Prisma.XOR<Prisma.IncidentTypeCreateInput, Prisma.IncidentTypeUncheckedCreateInput>
  /**
   * In case the IncidentType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IncidentTypeUpdateInput, Prisma.IncidentTypeUncheckedUpdateInput>
}

/**
 * IncidentType delete
 */
export type IncidentTypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeInclude<ExtArgs> | null
  /**
   * Filter which IncidentType to delete.
   */
  where: Prisma.IncidentTypeWhereUniqueInput
}

/**
 * IncidentType deleteMany
 */
export type IncidentTypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IncidentTypes to delete
   */
  where?: Prisma.IncidentTypeWhereInput
  /**
   * Limit how many IncidentTypes to delete.
   */
  limit?: number
}

/**
 * IncidentType.severityConditions
 */
export type IncidentType$severityConditionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentTypeSeverityCondition
   */
  select?: Prisma.IncidentTypeSeverityConditionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentTypeSeverityCondition
   */
  omit?: Prisma.IncidentTypeSeverityConditionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeSeverityConditionInclude<ExtArgs> | null
  where?: Prisma.IncidentTypeSeverityConditionWhereInput
  orderBy?: Prisma.IncidentTypeSeverityConditionOrderByWithRelationInput | Prisma.IncidentTypeSeverityConditionOrderByWithRelationInput[]
  cursor?: Prisma.IncidentTypeSeverityConditionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.IncidentTypeSeverityConditionScalarFieldEnum | Prisma.IncidentTypeSeverityConditionScalarFieldEnum[]
}

/**
 * IncidentType.incidents
 */
export type IncidentType$incidentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentInclude<ExtArgs> | null
  where?: Prisma.IncidentWhereInput
  orderBy?: Prisma.IncidentOrderByWithRelationInput | Prisma.IncidentOrderByWithRelationInput[]
  cursor?: Prisma.IncidentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.IncidentScalarFieldEnum | Prisma.IncidentScalarFieldEnum[]
}

/**
 * IncidentType without action
 */
export type IncidentTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeInclude<ExtArgs> | null
}
