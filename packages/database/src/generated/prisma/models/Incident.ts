
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Incident` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Incident
 * 
 */
export type IncidentModel = runtime.Types.Result.DefaultSelection<Prisma.$IncidentPayload>

export type AggregateIncident = {
  _count: IncidentCountAggregateOutputType | null
  _avg: IncidentAvgAggregateOutputType | null
  _sum: IncidentSumAggregateOutputType | null
  _min: IncidentMinAggregateOutputType | null
  _max: IncidentMaxAggregateOutputType | null
}

export type IncidentAvgAggregateOutputType = {
  id: number | null
  typeId: number | null
}

export type IncidentSumAggregateOutputType = {
  id: number | null
  typeId: number | null
}

export type IncidentMinAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  status: $Enums.IncidentStatus | null
  severity: $Enums.IncidentSeverity | null
  serviceId: string | null
  typeId: number | null
  createdAt: Date | null
  updatedAt: Date | null
  createdById: string | null
  updatedById: string | null
}

export type IncidentMaxAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  status: $Enums.IncidentStatus | null
  severity: $Enums.IncidentSeverity | null
  serviceId: string | null
  typeId: number | null
  createdAt: Date | null
  updatedAt: Date | null
  createdById: string | null
  updatedById: string | null
}

export type IncidentCountAggregateOutputType = {
  id: number
  title: number
  description: number
  status: number
  severity: number
  serviceId: number
  typeId: number
  createdAt: number
  updatedAt: number
  createdById: number
  updatedById: number
  _all: number
}


export type IncidentAvgAggregateInputType = {
  id?: true
  typeId?: true
}

export type IncidentSumAggregateInputType = {
  id?: true
  typeId?: true
}

export type IncidentMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  status?: true
  severity?: true
  serviceId?: true
  typeId?: true
  createdAt?: true
  updatedAt?: true
  createdById?: true
  updatedById?: true
}

export type IncidentMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  status?: true
  severity?: true
  serviceId?: true
  typeId?: true
  createdAt?: true
  updatedAt?: true
  createdById?: true
  updatedById?: true
}

export type IncidentCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  status?: true
  severity?: true
  serviceId?: true
  typeId?: true
  createdAt?: true
  updatedAt?: true
  createdById?: true
  updatedById?: true
  _all?: true
}

export type IncidentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Incident to aggregate.
   */
  where?: Prisma.IncidentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Incidents to fetch.
   */
  orderBy?: Prisma.IncidentOrderByWithRelationInput | Prisma.IncidentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IncidentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Incidents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Incidents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Incidents
  **/
  _count?: true | IncidentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IncidentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IncidentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IncidentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IncidentMaxAggregateInputType
}

export type GetIncidentAggregateType<T extends IncidentAggregateArgs> = {
      [P in keyof T & keyof AggregateIncident]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIncident[P]>
    : Prisma.GetScalarType<T[P], AggregateIncident[P]>
}




export type IncidentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IncidentWhereInput
  orderBy?: Prisma.IncidentOrderByWithAggregationInput | Prisma.IncidentOrderByWithAggregationInput[]
  by: Prisma.IncidentScalarFieldEnum[] | Prisma.IncidentScalarFieldEnum
  having?: Prisma.IncidentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IncidentCountAggregateInputType | true
  _avg?: IncidentAvgAggregateInputType
  _sum?: IncidentSumAggregateInputType
  _min?: IncidentMinAggregateInputType
  _max?: IncidentMaxAggregateInputType
}

export type IncidentGroupByOutputType = {
  id: number
  title: string
  description: string | null
  status: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  serviceId: string
  typeId: number | null
  createdAt: Date
  updatedAt: Date
  createdById: string
  updatedById: string
  _count: IncidentCountAggregateOutputType | null
  _avg: IncidentAvgAggregateOutputType | null
  _sum: IncidentSumAggregateOutputType | null
  _min: IncidentMinAggregateOutputType | null
  _max: IncidentMaxAggregateOutputType | null
}

type GetIncidentGroupByPayload<T extends IncidentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IncidentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IncidentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IncidentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IncidentGroupByOutputType[P]>
      }
    >
  >



export type IncidentWhereInput = {
  AND?: Prisma.IncidentWhereInput | Prisma.IncidentWhereInput[]
  OR?: Prisma.IncidentWhereInput[]
  NOT?: Prisma.IncidentWhereInput | Prisma.IncidentWhereInput[]
  id?: Prisma.IntFilter<"Incident"> | number
  title?: Prisma.StringFilter<"Incident"> | string
  description?: Prisma.StringNullableFilter<"Incident"> | string | null
  status?: Prisma.EnumIncidentStatusFilter<"Incident"> | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFilter<"Incident"> | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFilter<"Incident"> | string
  typeId?: Prisma.IntNullableFilter<"Incident"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Incident"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Incident"> | Date | string
  createdById?: Prisma.StringFilter<"Incident"> | string
  updatedById?: Prisma.StringFilter<"Incident"> | string
  service?: Prisma.XOR<Prisma.ServiceScalarRelationFilter, Prisma.ServiceWhereInput>
  type?: Prisma.XOR<Prisma.IncidentTypeNullableScalarRelationFilter, Prisma.IncidentTypeWhereInput> | null
  alerts?: Prisma.AlertListRelationFilter
  createdBy?: Prisma.XOR<Prisma.ApikeyScalarRelationFilter, Prisma.ApikeyWhereInput>
  updatedBy?: Prisma.XOR<Prisma.ApikeyScalarRelationFilter, Prisma.ApikeyWhereInput>
}

export type IncidentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  typeId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
  service?: Prisma.ServiceOrderByWithRelationInput
  type?: Prisma.IncidentTypeOrderByWithRelationInput
  alerts?: Prisma.AlertOrderByRelationAggregateInput
  createdBy?: Prisma.ApikeyOrderByWithRelationInput
  updatedBy?: Prisma.ApikeyOrderByWithRelationInput
}

export type IncidentWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.IncidentWhereInput | Prisma.IncidentWhereInput[]
  OR?: Prisma.IncidentWhereInput[]
  NOT?: Prisma.IncidentWhereInput | Prisma.IncidentWhereInput[]
  title?: Prisma.StringFilter<"Incident"> | string
  description?: Prisma.StringNullableFilter<"Incident"> | string | null
  status?: Prisma.EnumIncidentStatusFilter<"Incident"> | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFilter<"Incident"> | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFilter<"Incident"> | string
  typeId?: Prisma.IntNullableFilter<"Incident"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Incident"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Incident"> | Date | string
  createdById?: Prisma.StringFilter<"Incident"> | string
  updatedById?: Prisma.StringFilter<"Incident"> | string
  service?: Prisma.XOR<Prisma.ServiceScalarRelationFilter, Prisma.ServiceWhereInput>
  type?: Prisma.XOR<Prisma.IncidentTypeNullableScalarRelationFilter, Prisma.IncidentTypeWhereInput> | null
  alerts?: Prisma.AlertListRelationFilter
  createdBy?: Prisma.XOR<Prisma.ApikeyScalarRelationFilter, Prisma.ApikeyWhereInput>
  updatedBy?: Prisma.XOR<Prisma.ApikeyScalarRelationFilter, Prisma.ApikeyWhereInput>
}, "id">

export type IncidentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  typeId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
  _count?: Prisma.IncidentCountOrderByAggregateInput
  _avg?: Prisma.IncidentAvgOrderByAggregateInput
  _max?: Prisma.IncidentMaxOrderByAggregateInput
  _min?: Prisma.IncidentMinOrderByAggregateInput
  _sum?: Prisma.IncidentSumOrderByAggregateInput
}

export type IncidentScalarWhereWithAggregatesInput = {
  AND?: Prisma.IncidentScalarWhereWithAggregatesInput | Prisma.IncidentScalarWhereWithAggregatesInput[]
  OR?: Prisma.IncidentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IncidentScalarWhereWithAggregatesInput | Prisma.IncidentScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Incident"> | number
  title?: Prisma.StringWithAggregatesFilter<"Incident"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Incident"> | string | null
  status?: Prisma.EnumIncidentStatusWithAggregatesFilter<"Incident"> | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityWithAggregatesFilter<"Incident"> | $Enums.IncidentSeverity
  serviceId?: Prisma.StringWithAggregatesFilter<"Incident"> | string
  typeId?: Prisma.IntNullableWithAggregatesFilter<"Incident"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Incident"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Incident"> | Date | string
  createdById?: Prisma.StringWithAggregatesFilter<"Incident"> | string
  updatedById?: Prisma.StringWithAggregatesFilter<"Incident"> | string
}

export type IncidentCreateInput = {
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutIncidentsInput
  type?: Prisma.IncidentTypeCreateNestedOneWithoutIncidentsInput
  alerts?: Prisma.AlertCreateNestedManyWithoutIncidentInput
  createdBy: Prisma.ApikeyCreateNestedOneWithoutCreatedIncidentsInput
  updatedBy: Prisma.ApikeyCreateNestedOneWithoutUpdatedIncidentsInput
}

export type IncidentUncheckedCreateInput = {
  id?: number
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  serviceId: string
  typeId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
  alerts?: Prisma.AlertUncheckedCreateNestedManyWithoutIncidentInput
}

export type IncidentUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutIncidentsNestedInput
  type?: Prisma.IncidentTypeUpdateOneWithoutIncidentsNestedInput
  alerts?: Prisma.AlertUpdateManyWithoutIncidentNestedInput
  createdBy?: Prisma.ApikeyUpdateOneRequiredWithoutCreatedIncidentsNestedInput
  updatedBy?: Prisma.ApikeyUpdateOneRequiredWithoutUpdatedIncidentsNestedInput
}

export type IncidentUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  typeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
  alerts?: Prisma.AlertUncheckedUpdateManyWithoutIncidentNestedInput
}

export type IncidentCreateManyInput = {
  id?: number
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  serviceId: string
  typeId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
}

export type IncidentUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncidentUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  typeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IncidentListRelationFilter = {
  every?: Prisma.IncidentWhereInput
  some?: Prisma.IncidentWhereInput
  none?: Prisma.IncidentWhereInput
}

export type IncidentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IncidentNullableScalarRelationFilter = {
  is?: Prisma.IncidentWhereInput | null
  isNot?: Prisma.IncidentWhereInput | null
}

export type IncidentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
}

export type IncidentAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
}

export type IncidentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
}

export type IncidentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  severity?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  updatedById?: Prisma.SortOrder
}

export type IncidentSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
}

export type IncidentCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutServiceInput, Prisma.IncidentUncheckedCreateWithoutServiceInput> | Prisma.IncidentCreateWithoutServiceInput[] | Prisma.IncidentUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutServiceInput | Prisma.IncidentCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.IncidentCreateManyServiceInputEnvelope
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
}

export type IncidentUncheckedCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutServiceInput, Prisma.IncidentUncheckedCreateWithoutServiceInput> | Prisma.IncidentCreateWithoutServiceInput[] | Prisma.IncidentUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutServiceInput | Prisma.IncidentCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.IncidentCreateManyServiceInputEnvelope
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
}

export type IncidentUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutServiceInput, Prisma.IncidentUncheckedCreateWithoutServiceInput> | Prisma.IncidentCreateWithoutServiceInput[] | Prisma.IncidentUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutServiceInput | Prisma.IncidentCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.IncidentUpsertWithWhereUniqueWithoutServiceInput | Prisma.IncidentUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.IncidentCreateManyServiceInputEnvelope
  set?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  disconnect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  delete?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  update?: Prisma.IncidentUpdateWithWhereUniqueWithoutServiceInput | Prisma.IncidentUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.IncidentUpdateManyWithWhereWithoutServiceInput | Prisma.IncidentUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.IncidentScalarWhereInput | Prisma.IncidentScalarWhereInput[]
}

export type IncidentUncheckedUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutServiceInput, Prisma.IncidentUncheckedCreateWithoutServiceInput> | Prisma.IncidentCreateWithoutServiceInput[] | Prisma.IncidentUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutServiceInput | Prisma.IncidentCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.IncidentUpsertWithWhereUniqueWithoutServiceInput | Prisma.IncidentUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.IncidentCreateManyServiceInputEnvelope
  set?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  disconnect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  delete?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  update?: Prisma.IncidentUpdateWithWhereUniqueWithoutServiceInput | Prisma.IncidentUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.IncidentUpdateManyWithWhereWithoutServiceInput | Prisma.IncidentUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.IncidentScalarWhereInput | Prisma.IncidentScalarWhereInput[]
}

export type IncidentCreateNestedManyWithoutTypeInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutTypeInput, Prisma.IncidentUncheckedCreateWithoutTypeInput> | Prisma.IncidentCreateWithoutTypeInput[] | Prisma.IncidentUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutTypeInput | Prisma.IncidentCreateOrConnectWithoutTypeInput[]
  createMany?: Prisma.IncidentCreateManyTypeInputEnvelope
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
}

export type IncidentUncheckedCreateNestedManyWithoutTypeInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutTypeInput, Prisma.IncidentUncheckedCreateWithoutTypeInput> | Prisma.IncidentCreateWithoutTypeInput[] | Prisma.IncidentUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutTypeInput | Prisma.IncidentCreateOrConnectWithoutTypeInput[]
  createMany?: Prisma.IncidentCreateManyTypeInputEnvelope
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
}

export type IncidentUpdateManyWithoutTypeNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutTypeInput, Prisma.IncidentUncheckedCreateWithoutTypeInput> | Prisma.IncidentCreateWithoutTypeInput[] | Prisma.IncidentUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutTypeInput | Prisma.IncidentCreateOrConnectWithoutTypeInput[]
  upsert?: Prisma.IncidentUpsertWithWhereUniqueWithoutTypeInput | Prisma.IncidentUpsertWithWhereUniqueWithoutTypeInput[]
  createMany?: Prisma.IncidentCreateManyTypeInputEnvelope
  set?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  disconnect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  delete?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  update?: Prisma.IncidentUpdateWithWhereUniqueWithoutTypeInput | Prisma.IncidentUpdateWithWhereUniqueWithoutTypeInput[]
  updateMany?: Prisma.IncidentUpdateManyWithWhereWithoutTypeInput | Prisma.IncidentUpdateManyWithWhereWithoutTypeInput[]
  deleteMany?: Prisma.IncidentScalarWhereInput | Prisma.IncidentScalarWhereInput[]
}

export type IncidentUncheckedUpdateManyWithoutTypeNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutTypeInput, Prisma.IncidentUncheckedCreateWithoutTypeInput> | Prisma.IncidentCreateWithoutTypeInput[] | Prisma.IncidentUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutTypeInput | Prisma.IncidentCreateOrConnectWithoutTypeInput[]
  upsert?: Prisma.IncidentUpsertWithWhereUniqueWithoutTypeInput | Prisma.IncidentUpsertWithWhereUniqueWithoutTypeInput[]
  createMany?: Prisma.IncidentCreateManyTypeInputEnvelope
  set?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  disconnect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  delete?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  update?: Prisma.IncidentUpdateWithWhereUniqueWithoutTypeInput | Prisma.IncidentUpdateWithWhereUniqueWithoutTypeInput[]
  updateMany?: Prisma.IncidentUpdateManyWithWhereWithoutTypeInput | Prisma.IncidentUpdateManyWithWhereWithoutTypeInput[]
  deleteMany?: Prisma.IncidentScalarWhereInput | Prisma.IncidentScalarWhereInput[]
}

export type IncidentCreateNestedOneWithoutAlertsInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutAlertsInput, Prisma.IncidentUncheckedCreateWithoutAlertsInput>
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutAlertsInput
  connect?: Prisma.IncidentWhereUniqueInput
}

export type IncidentUpdateOneWithoutAlertsNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutAlertsInput, Prisma.IncidentUncheckedCreateWithoutAlertsInput>
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutAlertsInput
  upsert?: Prisma.IncidentUpsertWithoutAlertsInput
  disconnect?: Prisma.IncidentWhereInput | boolean
  delete?: Prisma.IncidentWhereInput | boolean
  connect?: Prisma.IncidentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.IncidentUpdateToOneWithWhereWithoutAlertsInput, Prisma.IncidentUpdateWithoutAlertsInput>, Prisma.IncidentUncheckedUpdateWithoutAlertsInput>
}

export type EnumIncidentStatusFieldUpdateOperationsInput = {
  set?: $Enums.IncidentStatus
}

export type IncidentCreateNestedManyWithoutCreatedByInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutCreatedByInput, Prisma.IncidentUncheckedCreateWithoutCreatedByInput> | Prisma.IncidentCreateWithoutCreatedByInput[] | Prisma.IncidentUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutCreatedByInput | Prisma.IncidentCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.IncidentCreateManyCreatedByInputEnvelope
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
}

export type IncidentCreateNestedManyWithoutUpdatedByInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutUpdatedByInput, Prisma.IncidentUncheckedCreateWithoutUpdatedByInput> | Prisma.IncidentCreateWithoutUpdatedByInput[] | Prisma.IncidentUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutUpdatedByInput | Prisma.IncidentCreateOrConnectWithoutUpdatedByInput[]
  createMany?: Prisma.IncidentCreateManyUpdatedByInputEnvelope
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
}

export type IncidentUncheckedCreateNestedManyWithoutCreatedByInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutCreatedByInput, Prisma.IncidentUncheckedCreateWithoutCreatedByInput> | Prisma.IncidentCreateWithoutCreatedByInput[] | Prisma.IncidentUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutCreatedByInput | Prisma.IncidentCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.IncidentCreateManyCreatedByInputEnvelope
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
}

export type IncidentUncheckedCreateNestedManyWithoutUpdatedByInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutUpdatedByInput, Prisma.IncidentUncheckedCreateWithoutUpdatedByInput> | Prisma.IncidentCreateWithoutUpdatedByInput[] | Prisma.IncidentUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutUpdatedByInput | Prisma.IncidentCreateOrConnectWithoutUpdatedByInput[]
  createMany?: Prisma.IncidentCreateManyUpdatedByInputEnvelope
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
}

export type IncidentUpdateManyWithoutCreatedByNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutCreatedByInput, Prisma.IncidentUncheckedCreateWithoutCreatedByInput> | Prisma.IncidentCreateWithoutCreatedByInput[] | Prisma.IncidentUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutCreatedByInput | Prisma.IncidentCreateOrConnectWithoutCreatedByInput[]
  upsert?: Prisma.IncidentUpsertWithWhereUniqueWithoutCreatedByInput | Prisma.IncidentUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.IncidentCreateManyCreatedByInputEnvelope
  set?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  disconnect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  delete?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  update?: Prisma.IncidentUpdateWithWhereUniqueWithoutCreatedByInput | Prisma.IncidentUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?: Prisma.IncidentUpdateManyWithWhereWithoutCreatedByInput | Prisma.IncidentUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.IncidentScalarWhereInput | Prisma.IncidentScalarWhereInput[]
}

export type IncidentUpdateManyWithoutUpdatedByNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutUpdatedByInput, Prisma.IncidentUncheckedCreateWithoutUpdatedByInput> | Prisma.IncidentCreateWithoutUpdatedByInput[] | Prisma.IncidentUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutUpdatedByInput | Prisma.IncidentCreateOrConnectWithoutUpdatedByInput[]
  upsert?: Prisma.IncidentUpsertWithWhereUniqueWithoutUpdatedByInput | Prisma.IncidentUpsertWithWhereUniqueWithoutUpdatedByInput[]
  createMany?: Prisma.IncidentCreateManyUpdatedByInputEnvelope
  set?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  disconnect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  delete?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  update?: Prisma.IncidentUpdateWithWhereUniqueWithoutUpdatedByInput | Prisma.IncidentUpdateWithWhereUniqueWithoutUpdatedByInput[]
  updateMany?: Prisma.IncidentUpdateManyWithWhereWithoutUpdatedByInput | Prisma.IncidentUpdateManyWithWhereWithoutUpdatedByInput[]
  deleteMany?: Prisma.IncidentScalarWhereInput | Prisma.IncidentScalarWhereInput[]
}

export type IncidentUncheckedUpdateManyWithoutCreatedByNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutCreatedByInput, Prisma.IncidentUncheckedCreateWithoutCreatedByInput> | Prisma.IncidentCreateWithoutCreatedByInput[] | Prisma.IncidentUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutCreatedByInput | Prisma.IncidentCreateOrConnectWithoutCreatedByInput[]
  upsert?: Prisma.IncidentUpsertWithWhereUniqueWithoutCreatedByInput | Prisma.IncidentUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.IncidentCreateManyCreatedByInputEnvelope
  set?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  disconnect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  delete?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  update?: Prisma.IncidentUpdateWithWhereUniqueWithoutCreatedByInput | Prisma.IncidentUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?: Prisma.IncidentUpdateManyWithWhereWithoutCreatedByInput | Prisma.IncidentUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.IncidentScalarWhereInput | Prisma.IncidentScalarWhereInput[]
}

export type IncidentUncheckedUpdateManyWithoutUpdatedByNestedInput = {
  create?: Prisma.XOR<Prisma.IncidentCreateWithoutUpdatedByInput, Prisma.IncidentUncheckedCreateWithoutUpdatedByInput> | Prisma.IncidentCreateWithoutUpdatedByInput[] | Prisma.IncidentUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.IncidentCreateOrConnectWithoutUpdatedByInput | Prisma.IncidentCreateOrConnectWithoutUpdatedByInput[]
  upsert?: Prisma.IncidentUpsertWithWhereUniqueWithoutUpdatedByInput | Prisma.IncidentUpsertWithWhereUniqueWithoutUpdatedByInput[]
  createMany?: Prisma.IncidentCreateManyUpdatedByInputEnvelope
  set?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  disconnect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  delete?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  connect?: Prisma.IncidentWhereUniqueInput | Prisma.IncidentWhereUniqueInput[]
  update?: Prisma.IncidentUpdateWithWhereUniqueWithoutUpdatedByInput | Prisma.IncidentUpdateWithWhereUniqueWithoutUpdatedByInput[]
  updateMany?: Prisma.IncidentUpdateManyWithWhereWithoutUpdatedByInput | Prisma.IncidentUpdateManyWithWhereWithoutUpdatedByInput[]
  deleteMany?: Prisma.IncidentScalarWhereInput | Prisma.IncidentScalarWhereInput[]
}

export type IncidentCreateWithoutServiceInput = {
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  createdAt?: Date | string
  updatedAt?: Date | string
  type?: Prisma.IncidentTypeCreateNestedOneWithoutIncidentsInput
  alerts?: Prisma.AlertCreateNestedManyWithoutIncidentInput
  createdBy: Prisma.ApikeyCreateNestedOneWithoutCreatedIncidentsInput
  updatedBy: Prisma.ApikeyCreateNestedOneWithoutUpdatedIncidentsInput
}

export type IncidentUncheckedCreateWithoutServiceInput = {
  id?: number
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  typeId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
  alerts?: Prisma.AlertUncheckedCreateNestedManyWithoutIncidentInput
}

export type IncidentCreateOrConnectWithoutServiceInput = {
  where: Prisma.IncidentWhereUniqueInput
  create: Prisma.XOR<Prisma.IncidentCreateWithoutServiceInput, Prisma.IncidentUncheckedCreateWithoutServiceInput>
}

export type IncidentCreateManyServiceInputEnvelope = {
  data: Prisma.IncidentCreateManyServiceInput | Prisma.IncidentCreateManyServiceInput[]
  skipDuplicates?: boolean
}

export type IncidentUpsertWithWhereUniqueWithoutServiceInput = {
  where: Prisma.IncidentWhereUniqueInput
  update: Prisma.XOR<Prisma.IncidentUpdateWithoutServiceInput, Prisma.IncidentUncheckedUpdateWithoutServiceInput>
  create: Prisma.XOR<Prisma.IncidentCreateWithoutServiceInput, Prisma.IncidentUncheckedCreateWithoutServiceInput>
}

export type IncidentUpdateWithWhereUniqueWithoutServiceInput = {
  where: Prisma.IncidentWhereUniqueInput
  data: Prisma.XOR<Prisma.IncidentUpdateWithoutServiceInput, Prisma.IncidentUncheckedUpdateWithoutServiceInput>
}

export type IncidentUpdateManyWithWhereWithoutServiceInput = {
  where: Prisma.IncidentScalarWhereInput
  data: Prisma.XOR<Prisma.IncidentUpdateManyMutationInput, Prisma.IncidentUncheckedUpdateManyWithoutServiceInput>
}

export type IncidentScalarWhereInput = {
  AND?: Prisma.IncidentScalarWhereInput | Prisma.IncidentScalarWhereInput[]
  OR?: Prisma.IncidentScalarWhereInput[]
  NOT?: Prisma.IncidentScalarWhereInput | Prisma.IncidentScalarWhereInput[]
  id?: Prisma.IntFilter<"Incident"> | number
  title?: Prisma.StringFilter<"Incident"> | string
  description?: Prisma.StringNullableFilter<"Incident"> | string | null
  status?: Prisma.EnumIncidentStatusFilter<"Incident"> | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFilter<"Incident"> | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFilter<"Incident"> | string
  typeId?: Prisma.IntNullableFilter<"Incident"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Incident"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Incident"> | Date | string
  createdById?: Prisma.StringFilter<"Incident"> | string
  updatedById?: Prisma.StringFilter<"Incident"> | string
}

export type IncidentCreateWithoutTypeInput = {
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutIncidentsInput
  alerts?: Prisma.AlertCreateNestedManyWithoutIncidentInput
  createdBy: Prisma.ApikeyCreateNestedOneWithoutCreatedIncidentsInput
  updatedBy: Prisma.ApikeyCreateNestedOneWithoutUpdatedIncidentsInput
}

export type IncidentUncheckedCreateWithoutTypeInput = {
  id?: number
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  serviceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
  alerts?: Prisma.AlertUncheckedCreateNestedManyWithoutIncidentInput
}

export type IncidentCreateOrConnectWithoutTypeInput = {
  where: Prisma.IncidentWhereUniqueInput
  create: Prisma.XOR<Prisma.IncidentCreateWithoutTypeInput, Prisma.IncidentUncheckedCreateWithoutTypeInput>
}

export type IncidentCreateManyTypeInputEnvelope = {
  data: Prisma.IncidentCreateManyTypeInput | Prisma.IncidentCreateManyTypeInput[]
  skipDuplicates?: boolean
}

export type IncidentUpsertWithWhereUniqueWithoutTypeInput = {
  where: Prisma.IncidentWhereUniqueInput
  update: Prisma.XOR<Prisma.IncidentUpdateWithoutTypeInput, Prisma.IncidentUncheckedUpdateWithoutTypeInput>
  create: Prisma.XOR<Prisma.IncidentCreateWithoutTypeInput, Prisma.IncidentUncheckedCreateWithoutTypeInput>
}

export type IncidentUpdateWithWhereUniqueWithoutTypeInput = {
  where: Prisma.IncidentWhereUniqueInput
  data: Prisma.XOR<Prisma.IncidentUpdateWithoutTypeInput, Prisma.IncidentUncheckedUpdateWithoutTypeInput>
}

export type IncidentUpdateManyWithWhereWithoutTypeInput = {
  where: Prisma.IncidentScalarWhereInput
  data: Prisma.XOR<Prisma.IncidentUpdateManyMutationInput, Prisma.IncidentUncheckedUpdateManyWithoutTypeInput>
}

export type IncidentCreateWithoutAlertsInput = {
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutIncidentsInput
  type?: Prisma.IncidentTypeCreateNestedOneWithoutIncidentsInput
  createdBy: Prisma.ApikeyCreateNestedOneWithoutCreatedIncidentsInput
  updatedBy: Prisma.ApikeyCreateNestedOneWithoutUpdatedIncidentsInput
}

export type IncidentUncheckedCreateWithoutAlertsInput = {
  id?: number
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  serviceId: string
  typeId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
}

export type IncidentCreateOrConnectWithoutAlertsInput = {
  where: Prisma.IncidentWhereUniqueInput
  create: Prisma.XOR<Prisma.IncidentCreateWithoutAlertsInput, Prisma.IncidentUncheckedCreateWithoutAlertsInput>
}

export type IncidentUpsertWithoutAlertsInput = {
  update: Prisma.XOR<Prisma.IncidentUpdateWithoutAlertsInput, Prisma.IncidentUncheckedUpdateWithoutAlertsInput>
  create: Prisma.XOR<Prisma.IncidentCreateWithoutAlertsInput, Prisma.IncidentUncheckedCreateWithoutAlertsInput>
  where?: Prisma.IncidentWhereInput
}

export type IncidentUpdateToOneWithWhereWithoutAlertsInput = {
  where?: Prisma.IncidentWhereInput
  data: Prisma.XOR<Prisma.IncidentUpdateWithoutAlertsInput, Prisma.IncidentUncheckedUpdateWithoutAlertsInput>
}

export type IncidentUpdateWithoutAlertsInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutIncidentsNestedInput
  type?: Prisma.IncidentTypeUpdateOneWithoutIncidentsNestedInput
  createdBy?: Prisma.ApikeyUpdateOneRequiredWithoutCreatedIncidentsNestedInput
  updatedBy?: Prisma.ApikeyUpdateOneRequiredWithoutUpdatedIncidentsNestedInput
}

export type IncidentUncheckedUpdateWithoutAlertsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  typeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IncidentCreateWithoutCreatedByInput = {
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutIncidentsInput
  type?: Prisma.IncidentTypeCreateNestedOneWithoutIncidentsInput
  alerts?: Prisma.AlertCreateNestedManyWithoutIncidentInput
  updatedBy: Prisma.ApikeyCreateNestedOneWithoutUpdatedIncidentsInput
}

export type IncidentUncheckedCreateWithoutCreatedByInput = {
  id?: number
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  serviceId: string
  typeId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  updatedById: string
  alerts?: Prisma.AlertUncheckedCreateNestedManyWithoutIncidentInput
}

export type IncidentCreateOrConnectWithoutCreatedByInput = {
  where: Prisma.IncidentWhereUniqueInput
  create: Prisma.XOR<Prisma.IncidentCreateWithoutCreatedByInput, Prisma.IncidentUncheckedCreateWithoutCreatedByInput>
}

export type IncidentCreateManyCreatedByInputEnvelope = {
  data: Prisma.IncidentCreateManyCreatedByInput | Prisma.IncidentCreateManyCreatedByInput[]
  skipDuplicates?: boolean
}

export type IncidentCreateWithoutUpdatedByInput = {
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutIncidentsInput
  type?: Prisma.IncidentTypeCreateNestedOneWithoutIncidentsInput
  alerts?: Prisma.AlertCreateNestedManyWithoutIncidentInput
  createdBy: Prisma.ApikeyCreateNestedOneWithoutCreatedIncidentsInput
}

export type IncidentUncheckedCreateWithoutUpdatedByInput = {
  id?: number
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  serviceId: string
  typeId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  alerts?: Prisma.AlertUncheckedCreateNestedManyWithoutIncidentInput
}

export type IncidentCreateOrConnectWithoutUpdatedByInput = {
  where: Prisma.IncidentWhereUniqueInput
  create: Prisma.XOR<Prisma.IncidentCreateWithoutUpdatedByInput, Prisma.IncidentUncheckedCreateWithoutUpdatedByInput>
}

export type IncidentCreateManyUpdatedByInputEnvelope = {
  data: Prisma.IncidentCreateManyUpdatedByInput | Prisma.IncidentCreateManyUpdatedByInput[]
  skipDuplicates?: boolean
}

export type IncidentUpsertWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.IncidentWhereUniqueInput
  update: Prisma.XOR<Prisma.IncidentUpdateWithoutCreatedByInput, Prisma.IncidentUncheckedUpdateWithoutCreatedByInput>
  create: Prisma.XOR<Prisma.IncidentCreateWithoutCreatedByInput, Prisma.IncidentUncheckedCreateWithoutCreatedByInput>
}

export type IncidentUpdateWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.IncidentWhereUniqueInput
  data: Prisma.XOR<Prisma.IncidentUpdateWithoutCreatedByInput, Prisma.IncidentUncheckedUpdateWithoutCreatedByInput>
}

export type IncidentUpdateManyWithWhereWithoutCreatedByInput = {
  where: Prisma.IncidentScalarWhereInput
  data: Prisma.XOR<Prisma.IncidentUpdateManyMutationInput, Prisma.IncidentUncheckedUpdateManyWithoutCreatedByInput>
}

export type IncidentUpsertWithWhereUniqueWithoutUpdatedByInput = {
  where: Prisma.IncidentWhereUniqueInput
  update: Prisma.XOR<Prisma.IncidentUpdateWithoutUpdatedByInput, Prisma.IncidentUncheckedUpdateWithoutUpdatedByInput>
  create: Prisma.XOR<Prisma.IncidentCreateWithoutUpdatedByInput, Prisma.IncidentUncheckedCreateWithoutUpdatedByInput>
}

export type IncidentUpdateWithWhereUniqueWithoutUpdatedByInput = {
  where: Prisma.IncidentWhereUniqueInput
  data: Prisma.XOR<Prisma.IncidentUpdateWithoutUpdatedByInput, Prisma.IncidentUncheckedUpdateWithoutUpdatedByInput>
}

export type IncidentUpdateManyWithWhereWithoutUpdatedByInput = {
  where: Prisma.IncidentScalarWhereInput
  data: Prisma.XOR<Prisma.IncidentUpdateManyMutationInput, Prisma.IncidentUncheckedUpdateManyWithoutUpdatedByInput>
}

export type IncidentCreateManyServiceInput = {
  id?: number
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  typeId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
}

export type IncidentUpdateWithoutServiceInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.IncidentTypeUpdateOneWithoutIncidentsNestedInput
  alerts?: Prisma.AlertUpdateManyWithoutIncidentNestedInput
  createdBy?: Prisma.ApikeyUpdateOneRequiredWithoutCreatedIncidentsNestedInput
  updatedBy?: Prisma.ApikeyUpdateOneRequiredWithoutUpdatedIncidentsNestedInput
}

export type IncidentUncheckedUpdateWithoutServiceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  typeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
  alerts?: Prisma.AlertUncheckedUpdateManyWithoutIncidentNestedInput
}

export type IncidentUncheckedUpdateManyWithoutServiceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  typeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IncidentCreateManyTypeInput = {
  id?: number
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  serviceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
  updatedById: string
}

export type IncidentUpdateWithoutTypeInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutIncidentsNestedInput
  alerts?: Prisma.AlertUpdateManyWithoutIncidentNestedInput
  createdBy?: Prisma.ApikeyUpdateOneRequiredWithoutCreatedIncidentsNestedInput
  updatedBy?: Prisma.ApikeyUpdateOneRequiredWithoutUpdatedIncidentsNestedInput
}

export type IncidentUncheckedUpdateWithoutTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
  alerts?: Prisma.AlertUncheckedUpdateManyWithoutIncidentNestedInput
}

export type IncidentUncheckedUpdateManyWithoutTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IncidentCreateManyCreatedByInput = {
  id?: number
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  serviceId: string
  typeId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  updatedById: string
}

export type IncidentCreateManyUpdatedByInput = {
  id?: number
  title: string
  description?: string | null
  status?: $Enums.IncidentStatus
  severity: $Enums.IncidentSeverity
  serviceId: string
  typeId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  createdById: string
}

export type IncidentUpdateWithoutCreatedByInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutIncidentsNestedInput
  type?: Prisma.IncidentTypeUpdateOneWithoutIncidentsNestedInput
  alerts?: Prisma.AlertUpdateManyWithoutIncidentNestedInput
  updatedBy?: Prisma.ApikeyUpdateOneRequiredWithoutUpdatedIncidentsNestedInput
}

export type IncidentUncheckedUpdateWithoutCreatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  typeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
  alerts?: Prisma.AlertUncheckedUpdateManyWithoutIncidentNestedInput
}

export type IncidentUncheckedUpdateManyWithoutCreatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  typeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedById?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IncidentUpdateWithoutUpdatedByInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutIncidentsNestedInput
  type?: Prisma.IncidentTypeUpdateOneWithoutIncidentsNestedInput
  alerts?: Prisma.AlertUpdateManyWithoutIncidentNestedInput
  createdBy?: Prisma.ApikeyUpdateOneRequiredWithoutCreatedIncidentsNestedInput
}

export type IncidentUncheckedUpdateWithoutUpdatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  typeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  alerts?: Prisma.AlertUncheckedUpdateManyWithoutIncidentNestedInput
}

export type IncidentUncheckedUpdateManyWithoutUpdatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
  severity?: Prisma.EnumIncidentSeverityFieldUpdateOperationsInput | $Enums.IncidentSeverity
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  typeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type IncidentCountOutputType
 */

export type IncidentCountOutputType = {
  alerts: number
}

export type IncidentCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  alerts?: boolean | IncidentCountOutputTypeCountAlertsArgs
}

/**
 * IncidentCountOutputType without action
 */
export type IncidentCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentCountOutputType
   */
  select?: Prisma.IncidentCountOutputTypeSelect<ExtArgs> | null
}

/**
 * IncidentCountOutputType without action
 */
export type IncidentCountOutputTypeCountAlertsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AlertWhereInput
}


export type IncidentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  status?: boolean
  severity?: boolean
  serviceId?: boolean
  typeId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  type?: boolean | Prisma.Incident$typeArgs<ExtArgs>
  alerts?: boolean | Prisma.Incident$alertsArgs<ExtArgs>
  createdBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.IncidentCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incident"]>

export type IncidentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  status?: boolean
  severity?: boolean
  serviceId?: boolean
  typeId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  type?: boolean | Prisma.Incident$typeArgs<ExtArgs>
  createdBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incident"]>

export type IncidentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  status?: boolean
  severity?: boolean
  serviceId?: boolean
  typeId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  type?: boolean | Prisma.Incident$typeArgs<ExtArgs>
  createdBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incident"]>

export type IncidentSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  status?: boolean
  severity?: boolean
  serviceId?: boolean
  typeId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdById?: boolean
  updatedById?: boolean
}

export type IncidentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "status" | "severity" | "serviceId" | "typeId" | "createdAt" | "updatedAt" | "createdById" | "updatedById", ExtArgs["result"]["incident"]>
export type IncidentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  type?: boolean | Prisma.Incident$typeArgs<ExtArgs>
  alerts?: boolean | Prisma.Incident$alertsArgs<ExtArgs>
  createdBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.IncidentCountOutputTypeDefaultArgs<ExtArgs>
}
export type IncidentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  type?: boolean | Prisma.Incident$typeArgs<ExtArgs>
  createdBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
}
export type IncidentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  type?: boolean | Prisma.Incident$typeArgs<ExtArgs>
  createdBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.ApikeyDefaultArgs<ExtArgs>
}

export type $IncidentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Incident"
  objects: {
    service: Prisma.$ServicePayload<ExtArgs>
    type: Prisma.$IncidentTypePayload<ExtArgs> | null
    alerts: Prisma.$AlertPayload<ExtArgs>[]
    createdBy: Prisma.$ApikeyPayload<ExtArgs>
    updatedBy: Prisma.$ApikeyPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    description: string | null
    status: $Enums.IncidentStatus
    severity: $Enums.IncidentSeverity
    serviceId: string
    typeId: number | null
    createdAt: Date
    updatedAt: Date
    createdById: string
    updatedById: string
  }, ExtArgs["result"]["incident"]>
  composites: {}
}

export type IncidentGetPayload<S extends boolean | null | undefined | IncidentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IncidentPayload, S>

export type IncidentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IncidentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IncidentCountAggregateInputType | true
  }

export interface IncidentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Incident'], meta: { name: 'Incident' } }
  /**
   * Find zero or one Incident that matches the filter.
   * @param {IncidentFindUniqueArgs} args - Arguments to find a Incident
   * @example
   * // Get one Incident
   * const incident = await prisma.incident.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IncidentFindUniqueArgs>(args: Prisma.SelectSubset<T, IncidentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IncidentClient<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Incident that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IncidentFindUniqueOrThrowArgs} args - Arguments to find a Incident
   * @example
   * // Get one Incident
   * const incident = await prisma.incident.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IncidentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IncidentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncidentClient<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Incident that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentFindFirstArgs} args - Arguments to find a Incident
   * @example
   * // Get one Incident
   * const incident = await prisma.incident.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IncidentFindFirstArgs>(args?: Prisma.SelectSubset<T, IncidentFindFirstArgs<ExtArgs>>): Prisma.Prisma__IncidentClient<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Incident that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentFindFirstOrThrowArgs} args - Arguments to find a Incident
   * @example
   * // Get one Incident
   * const incident = await prisma.incident.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IncidentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IncidentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncidentClient<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Incidents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Incidents
   * const incidents = await prisma.incident.findMany()
   * 
   * // Get first 10 Incidents
   * const incidents = await prisma.incident.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const incidentWithIdOnly = await prisma.incident.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IncidentFindManyArgs>(args?: Prisma.SelectSubset<T, IncidentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Incident.
   * @param {IncidentCreateArgs} args - Arguments to create a Incident.
   * @example
   * // Create one Incident
   * const Incident = await prisma.incident.create({
   *   data: {
   *     // ... data to create a Incident
   *   }
   * })
   * 
   */
  create<T extends IncidentCreateArgs>(args: Prisma.SelectSubset<T, IncidentCreateArgs<ExtArgs>>): Prisma.Prisma__IncidentClient<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Incidents.
   * @param {IncidentCreateManyArgs} args - Arguments to create many Incidents.
   * @example
   * // Create many Incidents
   * const incident = await prisma.incident.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IncidentCreateManyArgs>(args?: Prisma.SelectSubset<T, IncidentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Incidents and returns the data saved in the database.
   * @param {IncidentCreateManyAndReturnArgs} args - Arguments to create many Incidents.
   * @example
   * // Create many Incidents
   * const incident = await prisma.incident.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Incidents and only return the `id`
   * const incidentWithIdOnly = await prisma.incident.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IncidentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IncidentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Incident.
   * @param {IncidentDeleteArgs} args - Arguments to delete one Incident.
   * @example
   * // Delete one Incident
   * const Incident = await prisma.incident.delete({
   *   where: {
   *     // ... filter to delete one Incident
   *   }
   * })
   * 
   */
  delete<T extends IncidentDeleteArgs>(args: Prisma.SelectSubset<T, IncidentDeleteArgs<ExtArgs>>): Prisma.Prisma__IncidentClient<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Incident.
   * @param {IncidentUpdateArgs} args - Arguments to update one Incident.
   * @example
   * // Update one Incident
   * const incident = await prisma.incident.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IncidentUpdateArgs>(args: Prisma.SelectSubset<T, IncidentUpdateArgs<ExtArgs>>): Prisma.Prisma__IncidentClient<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Incidents.
   * @param {IncidentDeleteManyArgs} args - Arguments to filter Incidents to delete.
   * @example
   * // Delete a few Incidents
   * const { count } = await prisma.incident.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IncidentDeleteManyArgs>(args?: Prisma.SelectSubset<T, IncidentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Incidents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Incidents
   * const incident = await prisma.incident.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IncidentUpdateManyArgs>(args: Prisma.SelectSubset<T, IncidentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Incidents and returns the data updated in the database.
   * @param {IncidentUpdateManyAndReturnArgs} args - Arguments to update many Incidents.
   * @example
   * // Update many Incidents
   * const incident = await prisma.incident.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Incidents and only return the `id`
   * const incidentWithIdOnly = await prisma.incident.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IncidentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IncidentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Incident.
   * @param {IncidentUpsertArgs} args - Arguments to update or create a Incident.
   * @example
   * // Update or create a Incident
   * const incident = await prisma.incident.upsert({
   *   create: {
   *     // ... data to create a Incident
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Incident we want to update
   *   }
   * })
   */
  upsert<T extends IncidentUpsertArgs>(args: Prisma.SelectSubset<T, IncidentUpsertArgs<ExtArgs>>): Prisma.Prisma__IncidentClient<runtime.Types.Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Incidents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentCountArgs} args - Arguments to filter Incidents to count.
   * @example
   * // Count the number of Incidents
   * const count = await prisma.incident.count({
   *   where: {
   *     // ... the filter for the Incidents we want to count
   *   }
   * })
  **/
  count<T extends IncidentCountArgs>(
    args?: Prisma.Subset<T, IncidentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IncidentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Incident.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IncidentAggregateArgs>(args: Prisma.Subset<T, IncidentAggregateArgs>): Prisma.PrismaPromise<GetIncidentAggregateType<T>>

  /**
   * Group by Incident.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncidentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IncidentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IncidentGroupByArgs['orderBy'] }
      : { orderBy?: IncidentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IncidentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncidentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Incident model
 */
readonly fields: IncidentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Incident.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IncidentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  service<T extends Prisma.ServiceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ServiceDefaultArgs<ExtArgs>>): Prisma.Prisma__ServiceClient<runtime.Types.Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  type<T extends Prisma.Incident$typeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Incident$typeArgs<ExtArgs>>): Prisma.Prisma__IncidentTypeClient<runtime.Types.Result.GetResult<Prisma.$IncidentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  alerts<T extends Prisma.Incident$alertsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Incident$alertsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  createdBy<T extends Prisma.ApikeyDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApikeyDefaultArgs<ExtArgs>>): Prisma.Prisma__ApikeyClient<runtime.Types.Result.GetResult<Prisma.$ApikeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  updatedBy<T extends Prisma.ApikeyDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApikeyDefaultArgs<ExtArgs>>): Prisma.Prisma__ApikeyClient<runtime.Types.Result.GetResult<Prisma.$ApikeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Incident model
 */
export interface IncidentFieldRefs {
  readonly id: Prisma.FieldRef<"Incident", 'Int'>
  readonly title: Prisma.FieldRef<"Incident", 'String'>
  readonly description: Prisma.FieldRef<"Incident", 'String'>
  readonly status: Prisma.FieldRef<"Incident", 'IncidentStatus'>
  readonly severity: Prisma.FieldRef<"Incident", 'IncidentSeverity'>
  readonly serviceId: Prisma.FieldRef<"Incident", 'String'>
  readonly typeId: Prisma.FieldRef<"Incident", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Incident", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Incident", 'DateTime'>
  readonly createdById: Prisma.FieldRef<"Incident", 'String'>
  readonly updatedById: Prisma.FieldRef<"Incident", 'String'>
}
    

// Custom InputTypes
/**
 * Incident findUnique
 */
export type IncidentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentInclude<ExtArgs> | null
  /**
   * Filter, which Incident to fetch.
   */
  where: Prisma.IncidentWhereUniqueInput
}

/**
 * Incident findUniqueOrThrow
 */
export type IncidentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentInclude<ExtArgs> | null
  /**
   * Filter, which Incident to fetch.
   */
  where: Prisma.IncidentWhereUniqueInput
}

/**
 * Incident findFirst
 */
export type IncidentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentInclude<ExtArgs> | null
  /**
   * Filter, which Incident to fetch.
   */
  where?: Prisma.IncidentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Incidents to fetch.
   */
  orderBy?: Prisma.IncidentOrderByWithRelationInput | Prisma.IncidentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Incidents.
   */
  cursor?: Prisma.IncidentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Incidents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Incidents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Incidents.
   */
  distinct?: Prisma.IncidentScalarFieldEnum | Prisma.IncidentScalarFieldEnum[]
}

/**
 * Incident findFirstOrThrow
 */
export type IncidentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentInclude<ExtArgs> | null
  /**
   * Filter, which Incident to fetch.
   */
  where?: Prisma.IncidentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Incidents to fetch.
   */
  orderBy?: Prisma.IncidentOrderByWithRelationInput | Prisma.IncidentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Incidents.
   */
  cursor?: Prisma.IncidentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Incidents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Incidents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Incidents.
   */
  distinct?: Prisma.IncidentScalarFieldEnum | Prisma.IncidentScalarFieldEnum[]
}

/**
 * Incident findMany
 */
export type IncidentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentInclude<ExtArgs> | null
  /**
   * Filter, which Incidents to fetch.
   */
  where?: Prisma.IncidentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Incidents to fetch.
   */
  orderBy?: Prisma.IncidentOrderByWithRelationInput | Prisma.IncidentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Incidents.
   */
  cursor?: Prisma.IncidentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Incidents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Incidents.
   */
  skip?: number
  distinct?: Prisma.IncidentScalarFieldEnum | Prisma.IncidentScalarFieldEnum[]
}

/**
 * Incident create
 */
export type IncidentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentInclude<ExtArgs> | null
  /**
   * The data needed to create a Incident.
   */
  data: Prisma.XOR<Prisma.IncidentCreateInput, Prisma.IncidentUncheckedCreateInput>
}

/**
 * Incident createMany
 */
export type IncidentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Incidents.
   */
  data: Prisma.IncidentCreateManyInput | Prisma.IncidentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Incident createManyAndReturn
 */
export type IncidentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * The data used to create many Incidents.
   */
  data: Prisma.IncidentCreateManyInput | Prisma.IncidentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Incident update
 */
export type IncidentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentInclude<ExtArgs> | null
  /**
   * The data needed to update a Incident.
   */
  data: Prisma.XOR<Prisma.IncidentUpdateInput, Prisma.IncidentUncheckedUpdateInput>
  /**
   * Choose, which Incident to update.
   */
  where: Prisma.IncidentWhereUniqueInput
}

/**
 * Incident updateMany
 */
export type IncidentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Incidents.
   */
  data: Prisma.XOR<Prisma.IncidentUpdateManyMutationInput, Prisma.IncidentUncheckedUpdateManyInput>
  /**
   * Filter which Incidents to update
   */
  where?: Prisma.IncidentWhereInput
  /**
   * Limit how many Incidents to update.
   */
  limit?: number
}

/**
 * Incident updateManyAndReturn
 */
export type IncidentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * The data used to update Incidents.
   */
  data: Prisma.XOR<Prisma.IncidentUpdateManyMutationInput, Prisma.IncidentUncheckedUpdateManyInput>
  /**
   * Filter which Incidents to update
   */
  where?: Prisma.IncidentWhereInput
  /**
   * Limit how many Incidents to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Incident upsert
 */
export type IncidentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentInclude<ExtArgs> | null
  /**
   * The filter to search for the Incident to update in case it exists.
   */
  where: Prisma.IncidentWhereUniqueInput
  /**
   * In case the Incident found by the `where` argument doesn't exist, create a new Incident with this data.
   */
  create: Prisma.XOR<Prisma.IncidentCreateInput, Prisma.IncidentUncheckedCreateInput>
  /**
   * In case the Incident was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IncidentUpdateInput, Prisma.IncidentUncheckedUpdateInput>
}

/**
 * Incident delete
 */
export type IncidentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentInclude<ExtArgs> | null
  /**
   * Filter which Incident to delete.
   */
  where: Prisma.IncidentWhereUniqueInput
}

/**
 * Incident deleteMany
 */
export type IncidentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Incidents to delete
   */
  where?: Prisma.IncidentWhereInput
  /**
   * Limit how many Incidents to delete.
   */
  limit?: number
}

/**
 * Incident.type
 */
export type Incident$typeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncidentType
   */
  select?: Prisma.IncidentTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncidentType
   */
  omit?: Prisma.IncidentTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentTypeInclude<ExtArgs> | null
  where?: Prisma.IncidentTypeWhereInput
}

/**
 * Incident.alerts
 */
export type Incident$alertsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Alert
   */
  select?: Prisma.AlertSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Alert
   */
  omit?: Prisma.AlertOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AlertInclude<ExtArgs> | null
  where?: Prisma.AlertWhereInput
  orderBy?: Prisma.AlertOrderByWithRelationInput | Prisma.AlertOrderByWithRelationInput[]
  cursor?: Prisma.AlertWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AlertScalarFieldEnum | Prisma.AlertScalarFieldEnum[]
}

/**
 * Incident without action
 */
export type IncidentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Incident
   */
  select?: Prisma.IncidentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Incident
   */
  omit?: Prisma.IncidentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncidentInclude<ExtArgs> | null
}
